using Microsoft.Win32;
using Minecraft_Tools.Properties;
using Substrate_Jupisoft;
using Substrate_Jupisoft.Core;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Media;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Minecraft_Tools
{
    public partial class Ventana_Visor_Mundos_Realista_2D : Form
    {
        public Ventana_Visor_Mundos_Realista_2D()
        {
            InitializeComponent();
        }

        internal enum Dimensiones : int
        {
            Overworld = 0,
            Nether = 1,
            The_End = 2
        }

        internal enum Mapas : int
        {
            Superficie = 0,
            Superficie_Seca,
            Superficie_Muerta,
            Superficie_Realista,
            Bloques_Flotantes,
            Aire_Subterráneo,
            Cuevas_Subterráneas,
            Líquidos_Subterráneos,
            Bloques_Únicos_Verticales,
            Bloques_Peces_Plateados,
            Componentes_Piedra_Rojiza,
            Minerales,
            Estructuras_Ocultas,
            Nether_top_bedrock,
            Mapa_Altura,
            Biomas,
            Light_populated,
            Terrain_populated,
            Status,
            Luz_Bloques,
            Luz_Cielo,
            Heightmap_Ocean_Floor, // Minecraft 18w20c.
            Heightmap_Motion_Blocking_No_Leaves, // Minecraft 18w20c.
            Heightmap_Motion_Blocking, // Minecraft 18w20c.
            Heightmap_Light_Blocking, // Minecraft 18w20c.
            Buscar_Bloque,

            Total_Mapas // Don't use
        }

        internal static readonly string Texto_Título = "Realistic World Viewer in 2D by Jupisoft for " + Program.Texto_Usuario;
        internal static bool Variable_Mapa_3D = true;
        internal static Mapas Variable_Mapa = Mapas.Superficie;
        internal static bool Variable_Cortar_Y = false;
        internal string Variable_Dimensión = string.Empty;
        internal static int Variable_Zoom = 1;
        internal static string Variable_Bloque = "minecraft:diamond_ore";
        internal static int Variable_X = 0;
        internal static int Variable_Y = 255;
        internal static int Variable_Z = 0;
        internal bool Variable_Siempre_Visible = false;
        internal bool Variable_Excepción = false;
        internal bool Variable_Excepción_Imagen = false;
        internal int Variable_Excepción_Total = 0;
        internal bool Variable_Memoria = false;
        internal static Stopwatch Cronómetro_FPS = Stopwatch.StartNew();
        internal long Segundo_FPS_Anterior = 0L;
        internal long FPS_Temporal = 0L;
        internal long FPS_Real = 0L;
        internal static bool Variable_Vaciar_Caché_Dimensión_Actual = false;
        internal static bool Variable_Vaciar_Caché_Otras_Dimensiones = true;
        internal static bool Variable_Vaciar_Caché_Fuera_Pantalla = false;
        internal static bool Variable_Aleatorizar_Orden_Dibujo = true;
        internal static bool Variable_Cuadrícula_Chunks = false;
        internal static bool Variable_Pantalla_Completa = false;
        internal static bool Variable_Ventana_Maximizada = true;
        internal static Color Variable_Color_Fondo = Color.FromArgb(255, 64, 64, 64);

        internal bool Variable_Dibujar_Chunks_Limos = false;
        internal bool Variable_Dibujar_Estructuras = false;
        internal bool Variable_Dibujar_Mundo_Completo = false;

        internal decimal Variable_X_Anterior = 0m;
        internal decimal Variable_Z_Anterior = 0m;

        internal int Variable_Teletransporte_X = 0;
        internal int Variable_Teletransporte_Z = 0;

        internal static bool Variable_Contar_Densidades_Bloques_Niveles_Y = false;
        internal long Total_Bloques = 0L;
        internal Dictionary<short, long> Diccionario_Densidades = new Dictionary<short, long>();
        internal Dictionary<short, List<long>> Diccionario_Niveles_Y = new Dictionary<short, List<long>>();

        internal Stopwatch Cronómetro_Memoria = new Stopwatch(); // Turn the text red when over 4 GB

        internal int Ancho_Cliente = 0;
        internal int Alto_Cliente = 0;

        internal string Ruta_Nivel = null;
        internal string Ruta_Regiones_Overworld = null;
        internal string Ruta_Regiones_Nether = null;
        internal string Ruta_Regiones_The_End = null;
        internal Dictionary<string, string> Diccionario_Dimensiones_Rutas = new Dictionary<string, string>();
        internal Dictionary<string, Rectangle> Diccionario_Dimensiones_Límites = new Dictionary<string, Rectangle>();
        internal Dictionary<string, List<Point>> Diccionario_Dimensiones_Lista_Posiciones_Regiones = new Dictionary<string, List<Point>>();
        internal Dictionary<string, List<Minecraft.Regiones>> Diccionario_Dimensiones_Caché_Regiones = new Dictionary<string, List<Minecraft.Regiones>>();
        internal Minecraft.Información_Niveles Información_Nivel = Minecraft.Información_Niveles.Default();
        internal Dictionary<string, Minecraft.Posiciones_Jugadores> Diccionario_Posiciones_Jugadores = null;

        internal bool Pendiente_Copiar_Portapapeles = false;
        internal bool Pendiente_Copiar_Ventana_Portapapeles = false;
        internal bool Pendiente_Vaciar_Toda_Caché = false;
        internal bool Pendiente_Guardar_Imagen_PNG = false;
        internal bool Pendiente_Invertir_Mapa = false;
        internal bool Pendiente_Dibujar_Mapa = false;
        internal bool Pendiente_Redimensionar_Mapa = false;
        internal bool Pendiente_Subproceso_Abortar = false;
        internal bool Pendiente_Subproceso_Abortar_Global = false;
        internal bool Subproceso_Activo = false;

        internal string Ruta_Pendiente_Abrir = null;

        //internal Dictionary<Point, Minecraft.Regiones> Diccionario_Caché_Regiones_Overworld = new Dictionary<Point, Minecraft.Regiones>();
        //internal Dictionary<Point, Minecraft.Regiones> Diccionario_Caché_Regiones_Nether = new Dictionary<Point, Minecraft.Regiones>();
        //internal Dictionary<Point, Minecraft.Regiones> Diccionario_Caché_Regiones_The_End = new Dictionary<Point, Minecraft.Regiones>();

        internal bool Ocupado = false;
        //internal AnvilWorld Mundo = null;
        //internal RegionChunkManager Chunks = null;
        internal string Texto_Chunks = null;
        internal string Texto_Semilla = null;
        internal Thread Subproceso = null;
        internal Graphics Pintar = null;
        internal Graphics Pintar_Superior = null;

        internal List<string> Lista_Rutas_Mundos_Minecraft = new List<string>();
        internal List<string> Lista_Rutas_Mundos_Twitch = new List<string>();

        /*internal static readonly byte[] Matriz_Bytes_DataMappings = new byte[2112]
        {
            224, 0, 12, 23, 141, 14, 105, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0
        };*/

        // Function to decode Minecraft maps based on it's "colors" array, designed for
        // decoded Xbox 360 worlds and generates maps using rainbow colors (for now).
        internal void Xbox_360_Test()
        {
            // I don't know how to decode the colors to use, so any help will be appreciated.
            byte[] bq0 = new byte[16384] {};
            byte[] bq1 = new byte[16384] {};
            byte[] bq2 = new byte[16384] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 42, 46, 46, 46, 42, 42, 46, 46, 46, 42, 42, 46, 42, 42, 46, 46, 46, 46, 46, 42, 46, 42, 46, 46, 46, 46, 46, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 45, 45, 41, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 45, 45, 41, 41, 41, 41, 41, 45, 45, 45, 41, 41, 45, 45, 45, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 45, 41, 45, 45, 41, 41, 41, 45, 45, 41, 45, 45, 41, 41, 41, 41, 41, 45, 41, 45, 41, 41, 41, 41, 41, 45, 45, 45, 45, 45, 41, 45, 41, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 45, 45, 41, 41, 41, 41, 41, 45, 45, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 45, 41, 45, 41, 41, 45, 41, 41, 45, 45, 45, 45, 45, 41, 45, 41, 45, 45, 45, 45, 45, 41, 41, 45, 41, 41, 45, 41, 45, 41, 41, 45, 41, 45, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 41, 45, 45, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 45, 45, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 41, 45, 45, 41, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 41, 45, 45, 41, 41, 45, 41, 41, 45, 41, 45, 41, 41, 45, 41, 41, 45, 45, 41, 45, 45, 41, 41, 41, 45, 45, 41, 41, 41, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 41, 45, 45, 41, 45, 41, 45, 45, 45, 45, 45, 41, 41, 41, 45, 45, 41, 41, 41, 45, 45, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 45, 45, 41, 45, 45, 41, 41, 41, 45, 45, 41, 45, 41, 45, 45, 45, 45, 45, 41, 45, 41, 45, 45, 41, 45, 45, 41, 41, 45, 41, 41, 45, 45, 41, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 45, 45, 45, 41, 45, 45, 45, 41, 45, 41, 45, 45, 41, 41, 41, 45, 45, 41, 45, 45, 41, 41, 45, 41, 41, 45, 41, 45, 41, 41, 45, 41, 41, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 45, 45, 45, 45, 45, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 45, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 41, 41, 41, 41, 41, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 41, 45, 41, 45, 41, 41, 41, 45, 41, 45, 41, 45, 41, 41, 45, 41, 45, 41, 41, 41, 41, 41, 45, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 45, 41, 45, 41, 45, 45, 41, 41, 41, 45, 45, 41, 41, 41, 45, 45, 45, 45, 45, 41, 45, 41, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 45, 45, 41, 45, 45, 41, 41, 41, 41, 41, 41, 41, 41, 45, 45, 41, 45, 41, 45, 41, 45, 41, 41, 45, 41, 45, 41, 41, 45, 41, 41, 45, 45, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 45, 41, 45, 45, 41, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 45, 41, 41, 41, 41, 41, 45, 41, 45, 41, 41, 45, 41, 45, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 41, 41, 41, 45, 45, 41, 41, 41, 45, 45, 41, 45, 45, 41, 41, 45, 41, 41, 45, 41, 45, 41, 41, 45, 41, 41, 45, 45, 41, 45, 45, 41, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 45, 45, 45, 45, 45, 41, 41, 41, 45, 45, 41, 45, 41, 45, 45, 45, 45, 45, 41, 45, 41, 45, 45, 41, 45, 41, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 45, 45, 41, 41, 41, 45, 45, 41, 45, 45, 41, 41, 45, 41, 41, 45, 41, 45, 41, 41, 45, 41, 41, 45, 45, 41, 45, 45, 41, 41, 41, 45, 45, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 41, 41, 41, 41, 45, 41, 45, 41, 41, 45, 41, 45, 41, 41, 41, 41, 41, 45, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 45, 45, 41, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 45, 41, 45, 41, 45, 45, 41, 41, 41, 41, 41, 41, 41, 41, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 41, 41, 41, 45, 45, 41, 41, 41, 45, 45, 45, 45, 45, 41, 41, 41, 45, 45, 41, 41, 41, 45, 45, 41, 45, 41, 41, 41, 45, 41, 41, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 45, 41, 45, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 45, 45, 41, 41, 41, 41, 41, 45, 41, 45, 41, 41, 45, 41, 45, 41, 45, 41, 45, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 41, 45, 45, 41, 45, 41, 45, 45, 45, 45, 45, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 41, 45, 45, 45, 41, 45, 45, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 45, 45, 41, 45, 41, 45, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 41, 45, 45, 41, 41, 41, 45, 45, 41, 45, 41, 45, 41, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 45, 41, 45, 45, 41, 45, 41, 45, 45, 45, 45, 45, 41, 45, 41, 45, 45, 41, 45, 41, 45, 45, 45, 45, 45, 41, 45, 41, 45, 45, 41, 41, 41, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 41, 41, 41, 41, 41, 45, 41, 45, 41, 41, 41, 41, 41, 45, 45, 45, 45, 45, 41, 45, 41, 45, 45, 41, 45, 45, 41, 41, 45, 41, 41, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 45, 45, 41, 45, 45, 41, 41, 41, 41, 41, 41, 41, 41, 45, 45, 41, 45, 41, 45, 41, 45, 41, 41, 45, 41, 45, 41, 41, 45, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 45, 45, 41, 41, 41, 45, 45, 41, 45, 41, 45, 45, 45, 41, 45, 45, 45, 41, 45, 45, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 41, 41, 41, 41, 45, 45, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 41, 45, 45, 41, 45, 41, 45, 45, 41, 45, 45, 41, 41, 45, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 45, 41, 45, 45, 41, 45, 45, 45, 41, 45, 41, 41, 45, 45, 45, 45, 45, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 45, 45, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 41, 45, 41, 45, 45, 41, 41, 41, 45, 45, 41, 45, 45, 41, 41, 45, 41, 41, 45, 41, 45, 41, 41, 45, 41, 41, 45, 45, 41, 45, 45, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 45, 45, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 45, 45, 45, 45, 45, 41, 41, 45, 41, 45, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 41, 41, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 41, 45, 45, 41, 45, 41, 45, 45, 41, 45, 45, 41, 41, 45, 41, 41, 45, 45, 45, 41, 41, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 45, 41, 41, 45, 45, 45, 45, 45, 45, 45, 45, 41, 41, 45, 41, 41, 45, 45, 41, 45, 45, 41, 45, 41, 45, 45, 45, 45, 45, 41, 41, 41, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            for (int Índice_bq = 0; Índice_bq < 3; Índice_bq++)
            {
                byte[] bq = Índice_bq == 0 ? bq0 : Índice_bq == 1 ? bq1 : bq2;
                int Ancho_Alto = (int)Math.Sqrt(bq.Length);
                Bitmap Imagen = new Bitmap(Ancho_Alto, Ancho_Alto, PixelFormat.Format32bppArgb);
                Graphics Pintar = Graphics.FromImage(Imagen);
                Pintar.CompositingMode = CompositingMode.SourceCopy;
                for (int y = 0, Índice = 0, Índice_ARGB = 0; y < Ancho_Alto; y++)
                {
                    for (int x = 0; x < Ancho_Alto; x++, Índice++, Índice_ARGB += 3) // Matriz_Pinceles_Grises_256?
                    {
                        // Just use a regular rainbow as the default palette, which is missing.
                        Pintar.FillRectangle(Program.Matriz_Pinceles_Arco_Iris_256[bq[Índice]], x, y, 1, 1);
                        
                        /*// My idea for decoding the colors: RGB will have 3, 3 and 2 bits for
                        // each byte and then just use a proportional power of 2.

                        // Result: cool, but it didn't work, so it must be encoded with
                        // another methods, which I currently ignore...

                        // Powers of 2 used: 128, 64, 32, 16, 8, 4, 2, 1.

                        int Valor_R = 0;
                        if ((bq[Índice] & 128) != 0) Valor_R += 4;
                        if ((bq[Índice] & 64) != 0) Valor_R += 2;
                        if ((bq[Índice] & 32) != 0) Valor_R += 1;

                        int Valor_G = 0;
                        if ((bq[Índice] & 16) != 0) Valor_G += 4;
                        if ((bq[Índice] & 8) != 0) Valor_G += 2;
                        if ((bq[Índice] & 4) != 0) Valor_G += 1;

                        int Valor_B = 0;
                        if ((bq[Índice] & 2) != 0) Valor_B += 2;
                        if ((bq[Índice] & 1) != 0) Valor_B += 1;

                        Valor_R *= 32;
                        Valor_G *= 32;
                        Valor_B *= 64;

                        Color Color_ARGB = Color.FromArgb(255, Valor_R, Valor_G, Valor_B);
                        SolidBrush Pincel = new SolidBrush(Color_ARGB);
                        Pintar.FillRectangle(Pincel, x, y, 1, 1);
                        Pincel.Dispose();
                        Pincel = null;*/
                    }
                }
                Pintar.Dispose();
                Pintar = null;
                Program.Guardar_Imagen_Temporal(Imagen, "bq" + Índice_bq.ToString());
            }
        }

        internal static Dictionary<short, object> Diccionario_Bloques_Aire = null;
        internal static Dictionary<short, object> Diccionario_Bloques_Flotantes = null;

        private void Ventana_Visor_Mundos_Tiempo_Real_Load(object sender, EventArgs e)
        {
            try
            {
                this.Icon = Program.Icono_Jupisoft.Clone() as Icon;
                //Xbox_360_Test(); // Just a test for future Xbox 360 support features.
                Ocupado = true;
                if (Diccionario_Bloques_Aire == null || Diccionario_Bloques_Aire.Count <= 0)
                {
                    Diccionario_Bloques_Aire = new Dictionary<short, object>();
                    Diccionario_Bloques_Aire.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:air"], null);
                    Diccionario_Bloques_Aire.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:cave_air"], null);
                    Diccionario_Bloques_Aire.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:void_air"], null);

                }
                if (Diccionario_Bloques_Flotantes == null || Diccionario_Bloques_Flotantes.Count <= 0)
                {
                    Diccionario_Bloques_Flotantes = new Dictionary<short, object>();
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:acacia_door"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:acacia_pressure_plate"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:acacia_sapling"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:acacia_sign"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:activator_rail"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:allium"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:anvil"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:attached_melon_stem"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:attached_pumpkin_stem"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:azure_bluet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:bamboo"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:bamboo_sapling"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:beetroots"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:birch_door"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:birch_pressure_plate"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:birch_sapling"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:birch_sign"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:black_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:black_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:blue_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:blue_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:blue_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:blue_orchid"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:brown_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:brown_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:brown_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:brown_mushroom"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:cactus"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:carrots"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:chipped_anvil"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:comparator"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:cornflower"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:cyan_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:cyan_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:cyan_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:damaged_anvil"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:dandelion"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:dark_oak_door"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:dark_oak_pressure_plate"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:dark_oak_sapling"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:dark_oak_sign"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:dead_bush"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:detector_rail"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:dragon_egg"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:fern"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:grass"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:gravel"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:gray_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:gray_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:gray_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:green_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:green_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:green_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:heavy_weighted_pressure_plate"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:iron_door"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:jungle_door"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:jungle_pressure_plate"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:jungle_sapling"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:jungle_sign"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:kelp"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:kelp_plant"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:large_fern"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:light_blue_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:light_blue_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:light_blue_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:light_gray_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:light_gray_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:light_gray_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:light_weighted_pressure_plate"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:lilac"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:lily_of_the_valley"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:lily_pad"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:lime_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:lime_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:lime_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:magenta_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:magenta_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:magenta_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:melon_stem"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:nether_wart"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:oak_door"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:oak_pressure_plate"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:oak_sapling"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:oak_sign"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:orange_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:orange_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:orange_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:orange_tulip"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:oxeye_daisy"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:peony"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:pink_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:pink_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:pink_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:pink_tulip"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:poppy"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:potatoes"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:powered_rail"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:pumpkin_stem"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:purple_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:purple_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:purple_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:rail"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:red_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:red_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:red_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:red_mushroom"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:red_sand"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:red_tulip"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:redstone_torch"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:redstone_wire"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:repeater"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:rose_bush"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:sand"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:sea_grass"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:sea_pickle"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:seagrass"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:sign"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:snow"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:spruce_door"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:spruce_pressure_plate"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:spruce_sapling"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:spruce_sign"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:stone_pressure_plate"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:sugar_cane"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:sunflower"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:tall_grass"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:tall_sea_grass"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:tall_seagrass"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:torch"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:wheat"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:white_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:white_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:white_concrete_powder"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:white_tulip"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:wither_rose"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:yellow_banner"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:yellow_carpet"], null);
                    Diccionario_Bloques_Flotantes.Add(Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:yellow_concrete_powder"], null);
                }
                Minecraft.Pendiente_Subproceso_Abortar = false;
                this.WindowState = FormWindowState.Maximized;
                this.TopMost = Variable_Siempre_Visible;
                /*if (Variable_Ventana_Maximizada) this.WindowState = FormWindowState.Maximized;
                else
                {
                    Ancho_Cliente = Math.Max(Picture.ClientSize.Width, 1);
                    Alto_Cliente = Math.Max(Picture.ClientSize.Height, 1);
                }*/
                this.Text = Texto_Título + " - [Vanilla blocks registered: " + Program.Traducir_Número(Minecraft.Diccionario_Bloques_Nombres_Índices.Count) + "]";
                int Ancho = Math.Max(Picture.ClientSize.Width, 1);
                int Alto = Math.Max(Picture.ClientSize.Height, 1);
                Picture.BackgroundImage = new Bitmap(Ancho, Alto, PixelFormat.Format32bppArgb);
                Picture.Image = new Bitmap(Ancho, Alto, PixelFormat.Format32bppArgb);
                List<string> Lista_Nombres = new List<string>();
                foreach (KeyValuePair<string, short> Entrada in Minecraft.Diccionario_Bloques_Nombres_Índices)
                {
                    Lista_Nombres.Add(Entrada.Key.Substring(10, 1).ToUpperInvariant() + Entrada.Key.Substring(11).Replace('_', ' '));
                }
                Lista_Nombres.Sort(new Minecraft.Comparador_String());
                ComboBox_Bloque.Items.AddRange(Lista_Nombres.ToArray());
                Lista_Nombres = null;
                //ComboBox_Bloque.Items.AddRange(Minecraft.Lista_Bloques_Nombres.ToArray());
                Numérico_X.Minimum = int.MinValue;
                Numérico_Z.Minimum = int.MinValue;
                Numérico_X.Maximum = int.MaxValue;
                Numérico_Z.Maximum = int.MaxValue;
                Registro_Cargar_Opciones();
                // Load the existing Minecraft worlds from the default save folder and of any existing modpacks:
                if (Directory.Exists(Program.Ruta_Guardado_Minecraft))
                {
                    Lista_Rutas_Mundos_Minecraft.AddRange(Directory.GetDirectories(Program.Ruta_Guardado_Minecraft, "*", SearchOption.TopDirectoryOnly));
                    if (Lista_Rutas_Mundos_Minecraft != null && Lista_Rutas_Mundos_Minecraft.Count > 0)
                    {
                        if (Lista_Rutas_Mundos_Minecraft.Count > 1) Lista_Rutas_Mundos_Minecraft.Sort();
                        foreach (string Ruta in Lista_Rutas_Mundos_Minecraft)
                        {
                            ComboBox_Mundos_Minecraft.Items.Add("[Minecraft]: " + Path.GetFileName(Ruta));
                        }
                        ComboBox_Mundos_Minecraft.SelectedIndex = 0;
                    }
                }
                if (Directory.Exists(Program.Ruta_Guardado_Twitch))
                {
                    string[] Matriz_Rutas_Packs_Mods = Directory.GetDirectories(Program.Ruta_Guardado_Twitch, "*", SearchOption.TopDirectoryOnly);
                    if (Matriz_Rutas_Packs_Mods != null && Matriz_Rutas_Packs_Mods.Length > 0)
                    {
                        foreach (string Ruta_Pack_Mods in Matriz_Rutas_Packs_Mods)
                        {
                            if (Directory.Exists(Ruta_Pack_Mods + "\\saves"))
                            {
                                string[] Matriz_Rutas = Directory.GetDirectories(Ruta_Pack_Mods + "\\saves", "*", SearchOption.TopDirectoryOnly);
                                if (Matriz_Rutas != null && Matriz_Rutas.Length > 0)
                                {
                                    if (Matriz_Rutas.Length > 1) Array.Sort(Matriz_Rutas);
                                    foreach (string Ruta in Matriz_Rutas)
                                    {
                                        ComboBox_Mundos_Curse.Items.Add("[" + Path.GetFileName(Ruta_Pack_Mods) + "]: " + Path.GetFileName(Ruta));
                                    }
                                    Lista_Rutas_Mundos_Twitch.AddRange(Matriz_Rutas);
                                    Matriz_Rutas = null;
                                }
                            }
                        }
                        if (ComboBox_Mundos_Curse.Items.Count > 0) ComboBox_Mundos_Curse.SelectedIndex = 0;
                    }
                }
                Ocupado = false;
                Pendiente_Dibujar_Mapa = false;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Ventana_Visor_Mundos_Tiempo_Real_Shown(object sender, EventArgs e)
        {
            try
            {
                this.Activate();
                Temporizador_Principal.Start();
                return;

                /*Directory.CreateDirectory(@"C:\Users\Jupisoft\AppData\Roaming\.minecraft\saves\Mundo_p0");
                AnvilWorld Mundo_Plano = AnvilWorld.Create(@"C:\Users\Jupisoft\AppData\Roaming\.minecraft\saves\Mundo_p0");

                IChunkManager cm = Mundo_Plano.GetChunkManager(0);

                // We can set different world parameters
                Mundo_Plano.Level.LevelName = "Flatlands";
                Mundo_Plano.Level.UseMapFeatures = false;
                Mundo_Plano.Level.GeneratorOptions = "3;minecraft:bedrock,2*minecraft:dirt,minecraft:grass;1;village"; // 3;minecraft:bedrock,3*minecraft:stone,52*minecraft:sandstone;2;
                Mundo_Plano.Level.GameType = GameType.CREATIVE;
                Mundo_Plano.Level.Spawn = new SpawnPoint(10, 102, 10);
                Mundo_Plano.Level.AllowCommands = true;
                Mundo_Plano.Level.GameRules.DoMobSpawning = false;
                Mundo_Plano.Level.GameRules.DoFireTick = false;
                Mundo_Plano.Level.GameRules.MobGriefing = false;
                Mundo_Plano.Level.GameRules.KeepInventory = true;
                Mundo_Plano.Level.Player = new Player();
                Mundo_Plano.Level.Player.Dimension = 0;
                Mundo_Plano.Level.Player.Position = new Vector3();
                Mundo_Plano.Level.Player.Position.X = 10;
                Mundo_Plano.Level.Player.Position.Y = 102;
                Mundo_Plano.Level.Player.Position.Z = 10;
                Mundo_Plano.Level.Player.Spawn = new SpawnPoint(10, 102, 10);
                Mundo_Plano.Level.Player.Abilities.Flying = true;

                ChunkRef chunk = cm.CreateChunk(0, 0);
                
                chunk.IsLightPopulated = true; // For 1.13+ conversion support.
                // This will suppress generating caves, ores, and all those
                // other goodies.
                chunk.IsTerrainPopulated = true;

                // Auto light recalculation is horrifically bad for creating
                // chunks from scratch, because we're placing thousands
                // of blocks.  Turn it off.
                chunk.Blocks.AutoLight = false;

                // Set the blocks
                //FlatChunk(chunk, 64);
                // Create bedrock
                for (int y = 0, i = 0; y < 4; y++)
                {
                    for (int z = 0; z < 16; z++)
                    {
                        for (int x = 0; x < 16; x++)
                        {
                            if (y == 0) chunk.Blocks.SetID(x, y + 3, z, (int)BlockType.BEDROCK);
                            else if (y == 1) chunk.Blocks.SetID(x, y + 100, z, (int)BlockType.DIRT);
                            else if (y == 2 && i < 256 && (x != 13 || z != 4)) chunk.Blocks.SetID(x, y + 100, z, i);
                            else if (y == 3) chunk.Blocks.SetID(x, y + 120, z, (int)BlockType.GLOWSTONE_BLOCK);
                            if (y == 2) i++;
                        }
                    }
                }

                // Reset and rebuild the lighting for the entire chunk at once
                chunk.Blocks.RebuildHeightMap();
                chunk.Blocks.RebuildBlockLight();
                chunk.Blocks.RebuildSkyLight();

                // 2 ...

                chunk = cm.CreateChunk(1, 0);
                
                chunk.IsLightPopulated = true; // For 1.13+ conversion support.
                // This will suppress generating caves, ores, and all those
                // other goodies.
                chunk.IsTerrainPopulated = true;

                // Auto light recalculation is horrifically bad for creating
                // chunks from scratch, because we're placing thousands
                // of blocks.  Turn it off.
                chunk.Blocks.AutoLight = false;

                // Set the blocks
                //FlatChunk(chunk, 64);
                // Create bedrock
                for (int y = 0, i = 256; y < 4; y++)
                {
                    for (int z = 0; z < 16; z++)
                    {
                        for (int x = 0; x < 16; x++)
                        {
                            if (y == 0) chunk.Blocks.SetID(x, y + 3, z, (int)BlockType.BEDROCK);
                            else if (y == 1) chunk.Blocks.SetID(x, y + 100, z, (int)BlockType.DIRT);
                            else if (y == 2 && i < 256 && (x != 13 || z != 4)) chunk.Blocks.SetID(x, y + 100, z, i);
                            else if (y == 3) chunk.Blocks.SetID(x, y + 120, z, (int)BlockType.GLOWSTONE_BLOCK);
                            if (y == 2) i++;
                        }
                    }
                }

                // Reset and rebuild the lighting for the entire chunk at once
                chunk.Blocks.RebuildHeightMap();
                chunk.Blocks.RebuildBlockLight();
                chunk.Blocks.RebuildSkyLight();

                // Save the chunk to disk so it doesn't hang around in RAM
                cm.Save();

                // Save all remaining data (including a default level.dat)
                // If we didn't save chunks earlier, they would be saved here
                Mundo_Plano.Save();*/
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Ventana_Visor_Mundos_Tiempo_Real_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                Pendiente_Dibujar_Mapa = false;
                Pendiente_Subproceso_Abortar_Global = true;
                Pendiente_Dibujar_Mapa = true;
                if (Subproceso_Activo) e.Cancel = true;
                else
                {
                    //Registro_Guardar_Opciones();
                    Cronómetro_Memoria.Reset();
                    Cronómetro_Memoria = null;
                    foreach (KeyValuePair<string, string> Entrada in Diccionario_Dimensiones_Rutas)
                    {
                        Diccionario_Dimensiones_Lista_Posiciones_Regiones[Entrada.Key].Clear();
                        Diccionario_Dimensiones_Caché_Regiones[Entrada.Key].Clear();
                    }
                    Diccionario_Dimensiones_Rutas.Clear();
                    Diccionario_Dimensiones_Límites.Clear();
                    Diccionario_Dimensiones_Lista_Posiciones_Regiones.Clear();
                    Diccionario_Dimensiones_Caché_Regiones.Clear();
                    GC.Collect();
                    GC.GetTotalMemory(true);
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Ventana_Visor_Mundos_Tiempo_Real_FormClosed(object sender, FormClosedEventArgs e)
        {
            try
            {

            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Ventana_Visor_Mundos_Tiempo_Real_SizeChanged(object sender, EventArgs e)
        {
            try
            {
                if (!Variable_Dibujar_Mundo_Completo)
                {
                    Ancho_Cliente = Math.Max(Picture.ClientSize.Width, 1);
                    Alto_Cliente = Math.Max(Picture.ClientSize.Height, 1);
                    if (!Variable_Pantalla_Completa) Variable_Ventana_Maximizada = this.WindowState == FormWindowState.Maximized;
                    /*if (Variable_Cuadrícula_Chunks)
                    {
                        Picture.Image = Obtener_Imagen_Cuadrícula_Chunks(Ancho_Cliente, Alto_Cliente);
                        Picture.Invalidate();
                        Picture.Update();
                    }*/
                    Pendiente_Redimensionar_Mapa = true;
                    Pendiente_Dibujar_Mapa = true;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Ventana_Visor_Mundos_Tiempo_Real_DragEnter(object sender, DragEventArgs e)
        {
            try
            {
                e.Effect = e.Data.GetDataPresent(DataFormats.FileDrop, true) ? DragDropEffects.Copy : DragDropEffects.None;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        internal void Abrir_Ruta_Nivel()
        {
            try
            {
                Ocupado = true;
                if (!string.IsNullOrEmpty(Ruta_Nivel))
                {
                    Información_Nivel = Minecraft.Información_Niveles.Obtener_Información_Nivel(Ruta_Nivel);
                    Diccionario_Posiciones_Jugadores = Minecraft.Posiciones_Jugadores.Obtener_Posiciones_Jugadores(Ruta_Nivel);
                    ComboBox_Posición_Jugador.Items.Clear();
                    if (Diccionario_Posiciones_Jugadores != null && Diccionario_Posiciones_Jugadores.Count > 0)
                    {
                        foreach (KeyValuePair<string, Minecraft.Posiciones_Jugadores> Entrada in Diccionario_Posiciones_Jugadores)
                        {
                            ComboBox_Posición_Jugador.Items.Add(Entrada.Key);
                        }
                    }
                    if (ComboBox_Posición_Jugador.Items.Count > 0) ComboBox_Posición_Jugador.SelectedIndex = 0;
                    string Dimensión = Variable_Dimensión;
                    ComboBox_Dimensión.Items.Clear();
                    Numérico_X.Minimum = 0;
                    Numérico_Z.Minimum = 0;
                    Numérico_X.Maximum = 0;
                    Numérico_Z.Maximum = 0;
                    Numérico_X.Value = 0;
                    Numérico_Z.Value = 0;
                    Barra_Estado_Etiqueta_Versión_Minecraft.Text = "Minecraft: " + (!string.IsNullOrEmpty(Información_Nivel.VersionName) ? Información_Nivel.VersionName : "?");
                    Barra_Estado_Etiqueta_Regiones.Text = "Regions: 0";
                    Barra_Estado_Etiqueta_Coordenadas_XZ_Mínimas.Text = "Min. XZ: 0, 0";
                    Barra_Estado_Etiqueta_Coordenadas_XZ_Máximas.Text = "Max. XZ: 0, 0";
                    Barra_Estado_Etiqueta_Dimensiones.Text = "Dimensions: 0 x 0";
                    Barra_Estado_Etiqueta_Bloques_Visibles.Text = "Visible blocks: 0";
                    //Pendiente_Vaciar_Caché_Overworld = true;
                    //Pendiente_Vaciar_Caché_Nether = true;
                    //Pendiente_Vaciar_Caché_The_End = true;
                    //Ruta_Nivel = Ruta_Carpeta;
                    //Ruta_Regiones_Overworld = Ruta_Nivel + "\\region";
                    //Ruta_Regiones_Nether = Ruta_Nivel + "\\DIM-1\\region";
                    //Ruta_Regiones_The_End = Ruta_Nivel + "\\DIM1\\region";
                    //Diccionario_Rutas_Regiones_Overworld = Minecraft.Obtener_Rutas_Regiones(Ruta_Regiones_Overworld);
                    //Diccionario_Rutas_Regiones_Nether = Minecraft.Obtener_Rutas_Regiones(Ruta_Regiones_Nether);
                    //Diccionario_Rutas_Regiones_The_End = Minecraft.Obtener_Rutas_Regiones(Ruta_Regiones_The_End);

                    // Reiniciar todas las variables:
                    foreach (KeyValuePair<string, string> Entrada in Diccionario_Dimensiones_Rutas)
                    {
                        Diccionario_Dimensiones_Lista_Posiciones_Regiones[Entrada.Key].Clear();
                        Diccionario_Dimensiones_Caché_Regiones[Entrada.Key].Clear();
                    }
                    Diccionario_Dimensiones_Rutas.Clear();
                    Diccionario_Dimensiones_Límites.Clear();
                    Diccionario_Dimensiones_Lista_Posiciones_Regiones.Clear();
                    Diccionario_Dimensiones_Caché_Regiones.Clear();
                    GC.Collect();
                    GC.GetTotalMemory(true);

                    // Intentar cargar el mundo:
                    Diccionario_Dimensiones_Rutas = Minecraft.Obtener_Diccionario_Rutas_Dimensiones(Ruta_Nivel);
                    if (Diccionario_Dimensiones_Rutas.Count > 0)
                    {
                        foreach (KeyValuePair<string, string> Entrada in Diccionario_Dimensiones_Rutas)
                        {
                            Rectangle Rectángulo;
                            Diccionario_Dimensiones_Lista_Posiciones_Regiones.Add(Entrada.Key, Minecraft.Obtener_Rutas_Regiones(Entrada.Value, out Rectángulo));
                            Diccionario_Dimensiones_Límites.Add(Entrada.Key, Rectángulo);
                            Diccionario_Dimensiones_Caché_Regiones.Add(Entrada.Key, new List<Minecraft.Regiones>());
                            ComboBox_Dimensión.Items.Add(Entrada.Key);
                        }
                        if (ComboBox_Dimensión.Items.Count > 0)
                        {
                            if (ComboBox_Dimensión.Items.Contains(Dimensión)) ComboBox_Dimensión.Text = Dimensión;
                            else ComboBox_Dimensión.SelectedIndex = 0;
                            if (Variable_Dibujar_Mundo_Completo)
                            {
                                //Numérico_X.Enabled = false;
                                //Numérico_Z.Enabled = false;
                                //if (Picture.Dock == DockStyle.Fill) Picture.Dock = DockStyle.None;
                                if (Diccionario_Dimensiones_Límites.ContainsKey(Variable_Dimensión))
                                {
                                    // Get the central coordinates of the current dimension:
                                    Rectangle Rectángulo = Diccionario_Dimensiones_Límites[Variable_Dimensión];
                                    int X = ((Rectángulo.Width - Rectángulo.X) + 1) / 2;
                                    int Z = ((Rectángulo.Height - Rectángulo.Y) + 1) / 2;
                                    int Ancho = ((Rectángulo.Width + 1) - Rectángulo.X) * Variable_Zoom;
                                    int Alto = ((Rectángulo.Height + 1) - Rectángulo.Y) * Variable_Zoom;

                                    if (Ancho > 30000) Ancho = 30000; // 2018_08_07_16_02_56_024
                                    if (Alto > 30000) Alto = 30000;

                                    // Center the PictureBox control on that coordinates and adjust it's size:
                                    Ancho_Cliente = Ancho;
                                    Alto_Cliente = Alto;
                                    Picture.Size = new Size(Ancho, Alto);
                                    Picture.Location = new Point((Panel_Picture.ClientSize.Width / 2) - (Ancho / 2), (Panel_Picture.ClientSize.Height / 2) - (Alto / 2));
                                    Picture.BackgroundImage = new Bitmap(Ancho_Cliente, Alto_Cliente, PixelFormat.Format32bppArgb);
                                    Picture.Image = new Bitmap(Ancho_Cliente, Alto_Cliente, PixelFormat.Format32bppArgb);
                                }
                                else // Something went wrong...
                                {
                                    Picture.Location = new Point(0, 0);
                                    Picture.Size = Panel_Picture.ClientSize; // Default size of 1 Minecraft region
                                    Picture.BackgroundImage = new Bitmap(Ancho_Cliente, Alto_Cliente, PixelFormat.Format32bppArgb);
                                    Picture.Image = new Bitmap(Ancho_Cliente, Alto_Cliente, PixelFormat.Format32bppArgb);
                                }
                            }
                        }
                        Ocupado = false;
                        Pendiente_Dibujar_Mapa = true;
                        /*Mundo = AnvilWorld.Open(Ruta_Carpeta);
                        if (Mundo != null)
                        {
                            Chunks = Mundo.GetChunkManager(ComboBox_Dimensión.SelectedIndex == 0 ? 0 : ComboBox_Dimensión.SelectedIndex == 1 ? -1 : 1);
                            if (Chunks != null)
                            {
                                int Total_Chunks = 0;
                                foreach (IChunk Chunk in Chunks) Total_Chunks++;
                                Texto_Chunks = Program.Traducir_Número(Total_Chunks);
                                Texto_Semilla = Program.Traducir_Número(Mundo.Level.RandomSeed);
                                Ocupado = true;
                                Numérico_X.Value = Mundo.Level.Spawn.X;
                                //Numérico_Y.Value = Mundo.Level.Spawn.Y;
                                Numérico_Y.Value = ComboBox_Dimensión.SelectedIndex == 0 || ComboBox_Dimensión.SelectedIndex == 2 ? 255 : 64;
                                Numérico_Z.Value = Mundo.Level.Spawn.Z;
                                Ocupado = false;
                                Dibujar_Pendiente = true;
                                break;
                            }
                            else
                            {
                                Mundo = null;
                                Chunks = null;
                            }
                        }
                        else
                        {
                            Mundo = null;
                            Chunks = null;
                        }*/
                    }
                    else // Cancelar del todo la carga
                    {
                        Ruta_Nivel = null;
                        Información_Nivel = Minecraft.Información_Niveles.Default();
                        Diccionario_Posiciones_Jugadores = null;
                    }
                    Dimensión = null;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
            finally
            {
                //this.Cursor = Cursors.Default;
                Ocupado = false;
            }
        }

        private void Ventana_Visor_Mundos_Tiempo_Real_DragDrop(object sender, DragEventArgs e)
        {
            try
            {
                if (e.Data.GetDataPresent(DataFormats.FileDrop, true))
                {
                    string[] Matriz_Rutas = e.Data.GetData(DataFormats.FileDrop, true) as string[];
                    if (Matriz_Rutas != null && Matriz_Rutas.Length > 0)
                    {
                        foreach (string Ruta in Matriz_Rutas)
                        {
                            try
                            {
                                if (!string.IsNullOrEmpty(Ruta))
                                {
                                    string Ruta_Carpeta = Directory.Exists(Ruta) ? Ruta : Path.GetDirectoryName(Ruta);
                                    if (Directory.Exists(Ruta_Carpeta + "\\region") || Directory.Exists(Ruta_Carpeta + "\\DIM-1") || Directory.Exists(Ruta_Carpeta + "\\DIM1"))
                                    {
                                        Ruta_Pendiente_Abrir = Ruta_Carpeta;
                                        //this.Cursor = Cursors.WaitCursor; // En espera para abrir la ruta
                                    }
                                }
                            }
                            catch (Exception Excepción)
                            {
                                Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null);
                                continue;
                            }
                        }
                        Matriz_Rutas = null;
                    }
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
            finally { Ocupado = false; }
        }

        private void Ventana_Visor_Mundos_Tiempo_Real_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (!e.Alt && !e.Control && !e.Shift)
                {
                    if (e.KeyCode == Keys.Escape) this.Close();
                    else if (e.KeyCode == Keys.Enter)
                    {
                        e.Handled = true;
                        e.SuppressKeyPress = true;
                    }
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void CheckBox_Mapa_3D_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Mapa_3D = CheckBox_Mapa_3D.Checked;
                Registro_Guardar_Opciones();
                Pendiente_Dibujar_Mapa = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void ComboBox_Mapa_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Mapa = (Mapas)ComboBox_Mapa.SelectedIndex;
                Registro_Guardar_Opciones();
                Pendiente_Dibujar_Mapa = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void CheckBox_Cortar_Y_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Cortar_Y = CheckBox_Cortar_Y.Checked;
                Registro_Guardar_Opciones();
                Pendiente_Dibujar_Mapa = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void ComboBox_Dimensión_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(ComboBox_Dimensión.Text))
                {
                    Variable_Dimensión = ComboBox_Dimensión.Text;
                    Registro_Guardar_Opciones();
                    if (Diccionario_Dimensiones_Límites.ContainsKey(Variable_Dimensión))
                    {
                        Ocupado = true;
                        Rectangle Rectángulo = Diccionario_Dimensiones_Límites[Variable_Dimensión];
                        Numérico_X.Minimum = Rectángulo.X;
                        Numérico_Z.Minimum = Rectángulo.Y;
                        Numérico_X.Maximum = Rectángulo.Width;
                        Numérico_Z.Maximum = Rectángulo.Height;
                        if (Información_Nivel.SpawnX > long.MinValue) Numérico_X.Value = Información_Nivel.SpawnX;
                        else Numérico_X.Value = 0;
                        //if (Información_Nivel.SpawnY > long.MinValue) Numérico_Y.Value = Información_Nivel.SpawnY;
                        //else Numérico_Y.Value = 0;
                        if (Información_Nivel.SpawnZ > long.MinValue) Numérico_Z.Value = Información_Nivel.SpawnZ;
                        else Numérico_Z.Value = 0;
                        Barra_Estado_Etiqueta_Regiones.Text = "Regions: " + Program.Traducir_Número(Diccionario_Dimensiones_Lista_Posiciones_Regiones[Variable_Dimensión].Count);
                        Barra_Estado_Etiqueta_Coordenadas_XZ_Mínimas.Text = "Min. XZ: " + Program.Traducir_Número(Rectángulo.X) + ", " + Program.Traducir_Número(Rectángulo.Y);
                        Barra_Estado_Etiqueta_Coordenadas_XZ_Máximas.Text = "Max. XZ: " + Program.Traducir_Número(Rectángulo.Width) + ", " + Program.Traducir_Número(Rectángulo.Height);
                        Barra_Estado_Etiqueta_Dimensiones.Text = "Blocks: " + Program.Traducir_Número((Rectángulo.Width + 1) - Rectángulo.X) + " x " + Program.Traducir_Número((Rectángulo.Height + 1) - Rectángulo.Y);
                        Barra_Estado_Etiqueta_Bloques_Visibles.Text = "Visible: " + Program.Traducir_Número(Ancho_Cliente * Alto_Cliente);
                        Ocupado = false;
                    }
                    else
                    {
                        Ocupado = true;
                        Numérico_X.Minimum = 0;
                        Numérico_Z.Minimum = 0;
                        Numérico_X.Maximum = 0;
                        Numérico_Z.Maximum = 0;
                        Numérico_X.Value = 0;
                        Numérico_Z.Value = 0;
                        Barra_Estado_Etiqueta_Regiones.Text = "Regions: 0";
                        Barra_Estado_Etiqueta_Coordenadas_XZ_Mínimas.Text = "Min. XZ: 0, 0";
                        Barra_Estado_Etiqueta_Coordenadas_XZ_Máximas.Text = "Max. XZ: 0, 0";
                        Barra_Estado_Etiqueta_Dimensiones.Text = "Blocks: 0 x 0";
                        Barra_Estado_Etiqueta_Bloques_Visibles.Text = "Visible: 0";
                        Ocupado = false;
                    }
                    Pendiente_Dibujar_Mapa = true;
                }
                else
                {
                    Numérico_X.Minimum = 0;
                    Numérico_Z.Minimum = 0;
                    Numérico_X.Maximum = 0;
                    Numérico_Z.Maximum = 0;
                    Numérico_X.Value = 0;
                    Numérico_Z.Value = 0;
                    Barra_Estado_Etiqueta_Versión_Minecraft.Text = "Minecraft: ?";
                    Barra_Estado_Etiqueta_Regiones.Text = "Regions: 0";
                    Barra_Estado_Etiqueta_Coordenadas_XZ_Mínimas.Text = "Min. XZ: 0, 0";
                    Barra_Estado_Etiqueta_Coordenadas_XZ_Máximas.Text = "Max. XZ: 0, 0";
                    Barra_Estado_Etiqueta_Dimensiones.Text = "Blocks: 0 x 0";
                    Barra_Estado_Etiqueta_Bloques_Visibles.Text = "Visible: 0";
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
            Ocupado = false;
        }

        private void ComboBox_Zoom_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (ComboBox_Zoom.SelectedIndex > -1)
                {
                    Variable_Zoom = int.Parse(ComboBox_Zoom.Text.Replace("x", null));
                    Registro_Guardar_Opciones();
                    /*if (Variable_Cuadrícula_Chunks)
                    {
                        Picture.Image = Obtener_Imagen_Cuadrícula_Chunks(Ancho_Cliente, Alto_Cliente);
                        Picture.Invalidate();
                        Picture.Update();
                    }*/
                    Pendiente_Dibujar_Mapa = true;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void ComboBox_Bloque_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(ComboBox_Bloque.Text))
                {
                    Variable_Bloque = "minecraft:" + ComboBox_Bloque.Text.ToLowerInvariant().Replace(' ', '_');
                    Registro_Guardar_Opciones();
                    if (Variable_Mapa == Mapas.Buscar_Bloque) Pendiente_Dibujar_Mapa = true;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void ComboBox_Bloque_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(ComboBox_Bloque.Text))
                {
                    Variable_Bloque = ComboBox_Bloque.Text.ToLowerInvariant().Replace(' ', '_');
                    Registro_Guardar_Opciones();
                    if (Variable_Mapa == Mapas.Buscar_Bloque) Pendiente_Dibujar_Mapa = true;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Numérico_X_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_X = (int)Numérico_X.Value;
                Registro_Guardar_Opciones();
                Numérico_X.Refresh();
                Pendiente_Dibujar_Mapa = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Numérico_Y_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Y = (int)Numérico_Y.Value;
                Registro_Guardar_Opciones();
                Numérico_Y.Refresh();
                Pendiente_Dibujar_Mapa = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Numérico_Z_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Z = (int)Numérico_Z.Value;
                Registro_Guardar_Opciones();
                Numérico_Z.Refresh();
                Pendiente_Dibujar_Mapa = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Picture_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                this.Select();
                this.Focus();
                //Picture.Cursor = Cursors.Cross;
                //Variable_X_Anterior = Numérico_X.Value;
                //Variable_Z_Anterior = Numérico_Z.Value;
                /*int Centro_X = Picture.ClientSize.Width / 2;
                int Centro_Z = Picture.ClientSize.Height / 2;
                int Desplazamiento_X = e.X - Centro_X;
                int Desplazamiento_Z = e.Y - Centro_Z;
                Point Posición_Pantalla = Picture.PointToScreen(new Point(Centro_X, Centro_Z));
                PInvoke.SetCursorPos(Posición_Pantalla.X, Posición_Pantalla.Y);*/
            }
            else if (e.Button == MouseButtons.Middle)
            {
                Pendiente_Invertir_Mapa = true;
            }
            return;
            try
            {
                if (e.Button == MouseButtons.Left)
                {
                    Ocupado = true;
                    int Centro_X = Picture.ClientSize.Width / 2;
                    int Centro_Z = Picture.ClientSize.Height / 2;
                    int Desplazamiento_X = e.X - Centro_X;
                    int Desplazamiento_Z = e.Y - Centro_Z;
                    Point Posición_Pantalla = Picture.PointToScreen(new Point(Centro_X, Centro_Z));
                    PInvoke.User32.SetCursorPos(Posición_Pantalla.X, Posición_Pantalla.Y);
                    Ocupado = false;
                }
                else if (e.Button == MouseButtons.Right)
                {
                    /*if (Mundo != null && Mundo.Level != null && Mundo.Level.Player != null)
                    {
                        Ocupado = true;
                        Numérico_X.Value = (decimal)Mundo.Level.Player.Spawn.X;
                        //Numérico_Y.Value = (decimal)Mundo.Level.Player.Spawn.Y;
                        Numérico_Z.Value = (decimal)Mundo.Level.Player.Spawn.Z;
                        Ocupado = false;
                        Dibujar_Pendiente = true;
                    }*/
                }
                else if (e.Button == MouseButtons.Middle)
                {
                    try { Clipboard.SetImage(Picture.BackgroundImage); }
                    catch { }
                    /*if (Mundo != null && Mundo.Level != null && Mundo.Level.Player != null && Mundo.Level.Player.Position != null)
                    {
                        Ocupado = true;
                        Numérico_X.Value = (decimal)Mundo.Level.Player.Position.X;
                        //Numérico_Y.Value = (decimal)Mundo.Level.Player.Position.Y;
                        Numérico_Z.Value = (decimal)Mundo.Level.Player.Position.Z;
                        Ocupado = false;
                        Dibujar_Pendiente = true;
                    }*/
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Picture_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.None)
                {
                    int Ancho = Picture.ClientSize.Width;
                    int Alto = Picture.ClientSize.Height;
                    int X = e.X;
                    int Z = e.Y;
                    if (X < 0) X = 0;
                    else if (X >= Ancho) X = Ancho - 1;
                    if (Z < 0) Z = 0;
                    else if (Z >= Alto) Z = Alto - 1;
                    //int Ancho_2 = (int)Math.Round((double)Ancho / 2d, MidpointRounding.AwayFromZero);
                    //int Alto_2 = (int)Math.Round((double)Alto / 2d, MidpointRounding.AwayFromZero);
                    int Ancho_2 = Ancho / 2;
                    int Alto_2 = Alto / 2;
                    int Diferencia_X_Centro = Ancho_2 - X;
                    int Diferencia_Z_Centro = Alto_2 - Z;
                    X = Variable_X - (Diferencia_X_Centro / Variable_Zoom);
                    Z = Variable_Z - (Diferencia_Z_Centro / Variable_Zoom);
                    Variable_Teletransporte_X = X;
                    Variable_Teletransporte_Z = Z;
                    Barra_Estado_Etiqueta_Coordenadas_XZ_Cursor.Text = "Cursor XZ: " + Program.Traducir_Número(X) + ", " + Program.Traducir_Número(Z);
                }
                return;
                if (e.Button == MouseButtons.Left)
                {
                    //this.Cursor = Cursors.Cross;
                    //Ocupado = true;
                    int Centro_X = Picture.ClientSize.Width / 2;
                    int Centro_Z = Picture.ClientSize.Height / 2;
                    int Desplazamiento_X = e.X - Centro_X;
                    int Desplazamiento_Z = e.Y - Centro_Z;
                    Point Posición_Pantalla = Picture.PointToScreen(new Point(Centro_X, Centro_Z));
                    PInvoke.User32.SetCursorPos(Posición_Pantalla.X, Posición_Pantalla.Y);
                    decimal Valor_X = Numérico_X.Value + ((decimal)Desplazamiento_X * 16m);
                    decimal Valor_Z = Numérico_Z.Value + ((decimal)Desplazamiento_Z * 16m);
                    if (Valor_X < Numérico_X.Minimum) Valor_X = Numérico_X.Minimum;
                    if (Valor_X > Numérico_X.Maximum) Valor_X = Numérico_X.Maximum;
                    if (Valor_Z < Numérico_Z.Minimum) Valor_Z = Numérico_Z.Minimum;
                    if (Valor_Z > Numérico_Z.Maximum) Valor_Z = Numérico_Z.Maximum;
                    bool Actualizar_Mapa = false;
                    if (Numérico_X.Value != Valor_X)
                    {
                        Numérico_X.Value = Valor_X;
                        Numérico_X.Refresh();
                        Actualizar_Mapa = true;
                    }
                    if (Numérico_Z.Value != Valor_Z)
                    {
                        Numérico_Z.Value = Valor_Z;
                        Numérico_Z.Refresh();
                        Actualizar_Mapa = true;
                    }
                    //Ocupado = false;
                    if (Actualizar_Mapa) Pendiente_Dibujar_Mapa = false;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Picture_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                return;
                if (e.Button == MouseButtons.Left)
                {
                    Picture.Cursor = Cursors.Default;
                    if (Numérico_X.Value != Variable_X_Anterior || Numérico_Z.Value != Variable_Z_Anterior)
                    {
                        Pendiente_Dibujar_Mapa = true;
                    }
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Vaciar_Caché_Fuera_Pantalla_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Vaciar_Caché_Fuera_Pantalla = Menú_Contextual_Vaciar_Caché_Fuera_Pantalla.Checked;
                Registro_Guardar_Opciones();
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Vaciar_Caché_Dimensión_Actual_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Vaciar_Caché_Dimensión_Actual = Menú_Contextual_Vaciar_Caché_Dimensión_Actual.Checked;
                Registro_Guardar_Opciones();
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Vaciar_Caché_Otras_Dimensiones_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Vaciar_Caché_Otras_Dimensiones = Menú_Contextual_Vaciar_Caché_Otras_Dimensiones.Checked;
                Registro_Guardar_Opciones();
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Seleccionar_Color_Fondo_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog Diálogo_Color = new ColorDialog();
                Diálogo_Color.AllowFullOpen = true;
                Diálogo_Color.AnyColor = true;
                Diálogo_Color.Color = Variable_Color_Fondo;
                Diálogo_Color.CustomColors = new int[16] { 255, 65535, 65280, 16776960, 16711680, 16711935, 0, 16777215, 128, 32896, 32768, 8421376, 8388608, 8388736, 8421504, 12632256 };
                Diálogo_Color.FullOpen = true;
                Diálogo_Color.SolidColorOnly = false;
                if (Diálogo_Color.ShowDialog(this) == DialogResult.OK)
                {
                    Variable_Color_Fondo = Color.FromArgb(255, Diálogo_Color.Color.R, Diálogo_Color.Color.G, Diálogo_Color.Color.B);
                    Registro_Guardar_Opciones();
                    Picture.BackColor = Variable_Color_Fondo;
                    Picture.Refresh();
                }
                Diálogo_Color.Dispose();
                Diálogo_Color = null;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Vaciar_Caché_Completa_Click(object sender, EventArgs e)
        {
            try
            {
                Pendiente_Vaciar_Toda_Caché = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Guardar_Mapa_Actual_Imagen_PNG_Click(object sender, EventArgs e)
        {
            try
            {
                Pendiente_Guardar_Imagen_PNG = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Copiar_Mapa_Actual_Portapapeles_Click(object sender, EventArgs e)
        {
            try
            {
                Pendiente_Copiar_Portapapeles = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Actualizar_Click(object sender, EventArgs e)
        {
            try
            {
                Pendiente_Dibujar_Mapa = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Aleatorizar_Orden_Dibujo_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Aleatorizar_Orden_Dibujo = Menú_Contextual_Aleatorizar_Orden_Dibujo.Checked;
                Registro_Guardar_Opciones();
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Mostrar_Cuadrícula_Chunks_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Cuadrícula_Chunks = Menú_Contextual_Mostrar_Cuadrícula_Chunks.Checked;
                Registro_Guardar_Opciones();
                /*if (!Variable_Cuadrícula_Chunks) Picture.Image = null;
                else Picture.Image = Obtener_Imagen_Cuadrícula_Chunks(Ancho_Cliente, Alto_Cliente);
                Picture.Invalidate();
                Picture.Update();*/
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Visor_Ayuda_Click(object sender, EventArgs e)
        {
            try
            {
                Ventana_Visor_Ayuda Ventana = new Ventana_Visor_Ayuda();
                Ventana.Ayuda = Ventana_Visor_Ayuda.Ayudas.Realistic_world_viewer_in_2D;
                Ventana.Variable_Siempre_Visible = Variable_Siempre_Visible;
                Ventana.ShowDialog(this);
                Ventana.Dispose();
                Ventana = null;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Acerca_Click(object sender, EventArgs e)
        {
            try
            {
                Ventana_Acerca Ventana = new Ventana_Acerca();
                Ventana.Variable_Siempre_Visible = Variable_Siempre_Visible;
                Ventana.ShowDialog(this);
                Ventana.Dispose();
                Ventana = null;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Depurador_Excepciones_Click(object sender, EventArgs e)
        {
            try
            {
                Variable_Excepción = false;
                Variable_Excepción_Imagen = false;
                Variable_Excepción_Total = 0;
                Barra_Estado_Botón_Excepción.Visible = false;
                Barra_Estado_Separador_1.Visible = false;
                Barra_Estado_Botón_Excepción.Image = Resources.Excepción_Gris;
                Barra_Estado_Botón_Excepción.ForeColor = Color.Black;
                Barra_Estado_Botón_Excepción.Text = "Exceptions: 0";
                Ventana_Depurador_Excepciones Ventana = new Ventana_Depurador_Excepciones();
                Ventana.Variable_Siempre_Visible = Variable_Siempre_Visible;
                Ventana.ShowDialog(this);
                Ventana.Dispose();
                Ventana = null;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Abrir_Carpeta_Click(object sender, EventArgs e)
        {
            try
            {
                Program.Crear_Carpetas(Program.Ruta_Guardado_Imágenes_Realistic_World_Viewer_2D);
                Program.Ejecutar_Ruta(Program.Ruta_Guardado_Imágenes_Realistic_World_Viewer_2D, ProcessWindowStyle.Maximized);
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Pantalla_Completa_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Pantalla_Completa = Menú_Contextual_Pantalla_Completa.Checked;
                Registro_Guardar_Opciones();
                if (!Variable_Pantalla_Completa)
                {
                    this.WindowState = Variable_Ventana_Maximizada ? FormWindowState.Maximized : FormWindowState.Normal;
                    this.FormBorderStyle = FormBorderStyle.Sizable;
                    this.TopMost = Variable_Siempre_Visible;
                    //this.TopMost = Siempre_Visible;
                    //Cursor.Show();
                }
                else
                {
                    if (!Variable_Siempre_Visible) this.TopMost = true;
                    //Ventana_Maximizada = this.WindowState == FormWindowState.Maximized;
                    //Cursor.Hide();
                    this.WindowState = FormWindowState.Normal;
                    //this.TopMost = true;
                    this.FormBorderStyle = FormBorderStyle.None;
                    this.WindowState = FormWindowState.Maximized;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Copiar_Ventana_Click(object sender, EventArgs e)
        {
            try
            {
                Pendiente_Copiar_Ventana_Portapapeles = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        internal Bitmap Obtener_Imagen_Cuadrícula_Chunks(int Ancho, int Alto)
        {
            try
            {
                int X = 0;
                int Z = 0;
                int Ancho_Mitad = Ancho_Cliente / 2;
                int Alto_Mitad = Alto_Cliente / 2;
                int Zoom_16 = Variable_Zoom * 16;

                int Resto_X = Variable_X % Zoom_16;
                int Resto_Z = Variable_Z % Zoom_16;
                int Resto_Ancho = Ancho_Mitad % Zoom_16;
                int Resto_Alto = Alto_Mitad % Zoom_16;
                int Diferencia_X = 0;
                int Diferencia_Z = 0;

                if (Resto_X > 0) Diferencia_X += (Zoom_16 - Resto_X);
                if (Resto_Z > 0) Diferencia_Z += (Zoom_16 - Resto_Z);
                if (Resto_Ancho > 0) Diferencia_X += (Zoom_16 - Resto_Ancho);
                if (Resto_Alto > 0) Diferencia_Z += (Zoom_16 - Resto_Alto);

                if (Diferencia_X >= Zoom_16) Diferencia_X -= Zoom_16;
                if (Diferencia_Z >= Zoom_16) Diferencia_Z -= Zoom_16;

                X -= Diferencia_X;
                Z -= Diferencia_Z;

                /*int X1 = Ancho_Mitad / Variable_Zoom;
                if (X1 * Variable_Zoom < Ancho_Mitad) X1++;
                int XX1 = X1 * Variable_Zoom;
                int XXX1 = Ancho_Mitad - XX1;
                int Resto_X = Ancho_Mitad % Zoom_16;
                if (Resto_X > 0) XXX1 -= (Zoom_16 - Resto_X);*/

                //int Resto_XX = -8;
                //int Resto_ZZ = -8;

                Rectangle Rectángulo = new Rectangle(X, Z, Ancho + Zoom_16, Alto + Zoom_16);
                //MessageBox.Show(Rectángulo.ToString());
                Bitmap Imagen = new Bitmap(Ancho, Alto, PixelFormat.Format32bppArgb);
                Graphics Pintar = Graphics.FromImage(Imagen);
                Pintar.CompositingMode = CompositingMode.SourceCopy;
                for (int Índice_Y = Z; Índice_Y < Alto + Diferencia_Z; Índice_Y += 16 * Variable_Zoom)
                {
                    for (int Índice_X = X; Índice_X < Ancho + Diferencia_X; Índice_X += 16 * Variable_Zoom)
                    {
                        HatchBrush Pincel = new HatchBrush(HatchStyle.Percent50, Program.Obtener_Color_Puro_1530(Program.Rand.Next(0, 1530)), Color.Transparent);
                        Pintar.FillRectangle(Pincel, Índice_X, Índice_Y, 16 * Variable_Zoom, 16 * Variable_Zoom);
                        Pintar.FillRectangle(Brushes.Transparent, Índice_X + 1, Índice_Y + 1, (16 * Variable_Zoom) - 2, (16 * Variable_Zoom) - 2);
                        Pincel.Dispose();
                        Pincel = null;
                    }
                }
                Pintar.Dispose();
                Pintar = null;
                return Imagen;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
            return null;
        }

        internal void Registro_Cargar_Opciones()
        {
            bool Ocupado_Original = Ocupado;
            try
            {
                Ocupado = true;
                RegistryKey Clave = Registry.CurrentUser.CreateSubKey("Software\\Jupisoft\\Minecraft Tools\\" + Program.Texto_Versión + "\\Realistic World Viewer in 2D");
                /*string[] Matriz_Nombres = Clave.GetValueNames();
                if (Matriz_Nombres != null && Matriz_Nombres.Length > 0)
                {
                    for (int Índice = 0; Índice < Matriz_Nombres.Length; Índice++)
                    {
                        if (string.Compare(Matriz_Nombres[Índice], "Version") != 0) Clave.DeleteValue(Matriz_Nombres[Índice]);
                    }
                } // Delete all the previous options except the Version
                Matriz_Nombres = null;*/
                int Registro_Errores = 0;
                try { Variable_Mapa_3D = bool.Parse((string)Clave.GetValue("In_3D", bool.TrueString)); }
                catch { Registro_Errores++; Variable_Mapa_3D = true; }
                try { Variable_Mapa = (Mapas)Clave.GetValue("Map", (int)Mapas.Superficie); }
                catch { Registro_Errores++; Variable_Mapa = Mapas.Superficie; }
                try { Variable_Cortar_Y = bool.Parse((string)Clave.GetValue("Slice_Y", bool.FalseString)); }
                catch { Registro_Errores++; Variable_Cortar_Y = false; }
                try { Variable_Dimensión = (string)Clave.GetValue("Dimension", "Overworld"); }
                catch { Registro_Errores++; Variable_Dimensión = "Overworld"; }
                try { Variable_Zoom = (int)Clave.GetValue("Zoom", 1); }
                catch { Registro_Errores++; Variable_Zoom = 1; }
                try { Variable_Bloque = Clave.GetValue("Block", "minecraft:diamond_ore").ToString().ToLowerInvariant(); }
                catch { Registro_Errores++; Variable_Bloque = "minecraft:diamond_ore"; }
                try { Variable_X = (int)Clave.GetValue("X", 0); }
                catch { Registro_Errores++; Variable_X = 0; }
                try { Variable_Y = (int)Clave.GetValue("Y", 255); }
                catch { Registro_Errores++; Variable_Y = 255; }
                try { Variable_Z = (int)Clave.GetValue("Z", 0); }
                catch { Registro_Errores++; Variable_Z = 0; }
                try { Variable_Vaciar_Caché_Dimensión_Actual = bool.Parse((string)Clave.GetValue("Clear_Cache_Current_Dimension", bool.FalseString)); }
                catch { Registro_Errores++; Variable_Vaciar_Caché_Dimensión_Actual = false; }
                try { Variable_Vaciar_Caché_Otras_Dimensiones = bool.Parse((string)Clave.GetValue("Clear_Cache_Other_Dimensions", bool.TrueString)); }
                catch { Registro_Errores++; Variable_Vaciar_Caché_Otras_Dimensiones = true; }
                try { Variable_Vaciar_Caché_Fuera_Pantalla = bool.Parse((string)Clave.GetValue("Clear_Cache_Outside_Screen", bool.FalseString)); }
                catch { Registro_Errores++; Variable_Vaciar_Caché_Fuera_Pantalla = false; }
                try { Variable_Aleatorizar_Orden_Dibujo = bool.Parse((string)Clave.GetValue("Randomize_Draw_Order", bool.TrueString)); }
                catch { Registro_Errores++; Variable_Aleatorizar_Orden_Dibujo = true; }
                try { Variable_Cuadrícula_Chunks = bool.Parse((string)Clave.GetValue("Chunk_Grid", bool.FalseString)); }
                catch { Registro_Errores++; Variable_Cuadrícula_Chunks = false; }
                try { Variable_Pantalla_Completa = bool.Parse((string)Clave.GetValue("Full_Screen", bool.FalseString)); }
                catch { Registro_Errores++; Variable_Pantalla_Completa = false; }
                try { Variable_Ventana_Maximizada = bool.Parse((string)Clave.GetValue("Window_Maximized", bool.TrueString)); }
                catch { Registro_Errores++; Variable_Ventana_Maximizada = true; }
                try { Variable_Color_Fondo = Color.FromArgb((int)Clave.GetValue("Background_Color", Color.FromArgb(255, 64, 64, 64).ToArgb())); }
                catch { Registro_Errores++; Variable_Color_Fondo = Color.FromArgb(255, 64, 64, 64); }
                if (Registro_Errores > 0) Depurador.Escribir_Excepción(Registro_Errores.ToString() + (Registro_Errores != 1 ? " settings" : " setting") + " couldn't be readed from the Windows registry at: \"HKEY_CURRENT_USER\\Software\\Jupisoft\\Minecraft Tools\\" + Program.Texto_Versión + "\\Realistic World Viewer in 2D\".");

                // Correct any bad value after loading:
                if (Variable_Mapa < 0 || Variable_Mapa >= Mapas.Total_Mapas) Variable_Mapa = 0;
                if (!ComboBox_Zoom.Items.Contains(Variable_Zoom.ToString() + "x")) Variable_Zoom = 1;
                if (string.IsNullOrEmpty(Variable_Bloque) || !Variable_Bloque.StartsWith("minecraft:") || !ComboBox_Bloque.Items.Contains(Variable_Bloque.Substring(10, 1).ToUpperInvariant() + Variable_Bloque.Substring(11).Replace('_', ' '))) Variable_Bloque = "minecraft:diamond_ore";
                if (Variable_Color_Fondo.A < 255) Variable_Color_Fondo = Color.FromArgb(255, Variable_Color_Fondo.R, Variable_Color_Fondo.G, Variable_Color_Fondo.B);

                // Apply all the loaded values:
                CheckBox_Mapa_3D.Checked = Variable_Mapa_3D;
                ComboBox_Mapa.SelectedIndex = (int)Variable_Mapa;
                CheckBox_Cortar_Y.Checked = Variable_Cortar_Y;
                if (!string.IsNullOrEmpty(Variable_Dimensión) && ComboBox_Dimensión.Items.Count > 0 && ComboBox_Dimensión.Items.Contains(Variable_Dimensión)) ComboBox_Dimensión.Text = Variable_Dimensión;
                ComboBox_Zoom.Text = Variable_Zoom.ToString() + "x";
                ComboBox_Bloque.Text = Variable_Bloque.Substring(10, 1).ToUpperInvariant() + Variable_Bloque.Substring(11).Replace('_', ' ');
                Numérico_X.Value = Variable_X;
                Numérico_Y.Value = Variable_Y;
                Numérico_Z.Value = Variable_Z;
                Menú_Contextual_Vaciar_Caché_Dimensión_Actual.Checked = Variable_Vaciar_Caché_Dimensión_Actual;
                Menú_Contextual_Vaciar_Caché_Otras_Dimensiones.Checked = Variable_Vaciar_Caché_Otras_Dimensiones;
                Menú_Contextual_Vaciar_Caché_Fuera_Pantalla.Checked = Variable_Vaciar_Caché_Fuera_Pantalla;
                Menú_Contextual_Aleatorizar_Orden_Dibujo.Checked = Variable_Aleatorizar_Orden_Dibujo;
                Menú_Contextual_Mostrar_Cuadrícula_Chunks.Checked = Variable_Cuadrícula_Chunks;
                Menú_Contextual_Pantalla_Completa.Checked = Variable_Pantalla_Completa;
                Picture.BackColor = Variable_Color_Fondo;
                Picture.Refresh();
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
            finally { Ocupado = Ocupado_Original; }
        }

        internal void Registro_Guardar_Opciones()
        {
            bool Ocupado_Original = Ocupado;
            try
            {
                Ocupado = true;
                RegistryKey Clave = Registry.CurrentUser.CreateSubKey("Software\\Jupisoft\\Minecraft Tools\\" + Program.Texto_Versión + "\\Realistic World Viewer in 2D");
                string[] Matriz_Nombres = Clave.GetValueNames();
                if (Matriz_Nombres != null && Matriz_Nombres.Length > 0)
                {
                    for (int Índice = 0; Índice < Matriz_Nombres.Length; Índice++)
                    {
                        if (string.Compare(Matriz_Nombres[Índice], "Version") != 0) Clave.DeleteValue(Matriz_Nombres[Índice]);
                    }
                } // Delete all the previous options except the Version
                Matriz_Nombres = null;
                int Registro_Errores = 0;
                try { Clave.SetValue("Slice_Y", Variable_Cortar_Y.ToString(), RegistryValueKind.String); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Map", (int)Variable_Mapa, RegistryValueKind.DWord); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("In_3D", Variable_Mapa_3D.ToString(), RegistryValueKind.String); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Dimension", Variable_Dimensión, RegistryValueKind.String); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Zoom", Variable_Zoom, RegistryValueKind.DWord); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Block", Variable_Bloque, RegistryValueKind.String); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("X", Variable_X, RegistryValueKind.DWord); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Y", Variable_Y, RegistryValueKind.DWord); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Z", Variable_Z, RegistryValueKind.DWord); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Clear_Cache_Current_Dimension", Variable_Vaciar_Caché_Dimensión_Actual.ToString(), RegistryValueKind.String); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Clear_Cache_Other_Dimensions", Variable_Vaciar_Caché_Otras_Dimensiones.ToString(), RegistryValueKind.String); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Clear_Cache_Outside_Screen", Variable_Vaciar_Caché_Fuera_Pantalla.ToString(), RegistryValueKind.String); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Randomize_Draw_Order", Variable_Aleatorizar_Orden_Dibujo.ToString(), RegistryValueKind.String); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Chunk_Grid", Variable_Cuadrícula_Chunks.ToString(), RegistryValueKind.String); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Full_Screen", Variable_Pantalla_Completa.ToString(), RegistryValueKind.String); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Window_Maximized", Variable_Ventana_Maximizada.ToString(), RegistryValueKind.String); }
                catch { Registro_Errores++; }
                try { Clave.SetValue("Background_Color", Variable_Color_Fondo.ToArgb(), RegistryValueKind.DWord); }
                catch { Registro_Errores++; }
                if (Registro_Errores > 0) Depurador.Escribir_Excepción(Registro_Errores.ToString() + (Registro_Errores != 1 ? " settings" : " setting") + " couldn't be stored in the Windows registry at: \"HKEY_CURRENT_USER\\Software\\Jupisoft\\Minecraft Tools\\" + Program.Texto_Versión + "\\Realistic World Viewer in 2D\".");
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
            finally { Ocupado = Ocupado_Original; }
        }

        internal void Registro_Restablecer_Opciones()
        {
            bool Ocupado_Original = Ocupado;
            try
            {
                Ocupado = true;
                RegistryKey Clave = Registry.CurrentUser.CreateSubKey("Software\\Jupisoft\\Minecraft Tools\\" + Program.Texto_Versión + "\\Realistic World Viewer in 2D");
                string[] Matriz_Nombres = Clave.GetValueNames();
                if (Matriz_Nombres != null && Matriz_Nombres.Length > 0)
                {
                    int Registro_Errores = 0;
                    for (int Índice = 0; Índice < Matriz_Nombres.Length; Índice++)
                    {
                        try { Clave.DeleteValue(Matriz_Nombres[Índice]); }
                        catch { Registro_Errores++; continue; }
                    }
                    if (Registro_Errores > 0) Depurador.Escribir_Excepción(Registro_Errores.ToString() + (Registro_Errores != 1 ? " settings" : " setting") + " couldn't be deleted from the Windows registry at: \"HKEY_CURRENT_USER\\Software\\Jupisoft\\Minecraft Tools\\" + Program.Texto_Versión + "\\Realistic World Viewer in 2D\".");
                    Matriz_Nombres = null;
                }
                Clave.Close();
                Clave = null;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
            finally { Ocupado = Ocupado_Original; }
        }

        private void ComboBox_Mapa_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Middle)
                {
                    ComboBox_Mapa.SelectedIndex = 0;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void CheckBox_Mapa_3D_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Middle)
                {
                    CheckBox_Mapa_3D.Checked = true;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void ComboBox_Dimensión_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Middle)
                {
                    if (ComboBox_Dimensión.Items.Count > 0) ComboBox_Dimensión.SelectedIndex = 0;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void ComboBox_Zoom_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Middle)
                {
                    ComboBox_Zoom.SelectedIndex = 0;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void ComboBox_Bloque_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Middle)
                {
                    ComboBox_Bloque.SelectedIndex = Program.Rand.Next(0, ComboBox_Bloque.Items.Count);
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Numérico_X_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Middle)
                {
                    Numérico_X.Value = 0m;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Numérico_Y_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Middle)
                {
                    if (Numérico_Y.Value == 255m) Numérico_Y.Value = 192m;
                    //else if (Numérico_Y.Value == 240m) Numérico_Y.Value = 224m;
                    //else if (Numérico_Y.Value == 224m) Numérico_Y.Value = 208m;
                    //else if (Numérico_Y.Value == 208m) Numérico_Y.Value = 192m;
                    else if (Numérico_Y.Value == 192m) Numérico_Y.Value = 128m;
                    //else if (Numérico_Y.Value == 176m) Numérico_Y.Value = 160m;
                    //else if (Numérico_Y.Value == 160m) Numérico_Y.Value = 144m;
                    //else if (Numérico_Y.Value == 144m) Numérico_Y.Value = 128m;
                    else if (Numérico_Y.Value == 128m) Numérico_Y.Value = 112m;
                    else if (Numérico_Y.Value == 112m) Numérico_Y.Value = 96m;
                    else if (Numérico_Y.Value == 96m) Numérico_Y.Value = 80m;
                    else if (Numérico_Y.Value == 80m) Numérico_Y.Value = 64m;
                    else if (Numérico_Y.Value == 64m) Numérico_Y.Value = 48m;
                    else if (Numérico_Y.Value == 48m) Numérico_Y.Value = 32m;
                    else if (Numérico_Y.Value == 32m) Numérico_Y.Value = 16m;
                    else if (Numérico_Y.Value == 16m) Numérico_Y.Value = 11m;
                    //else if (Numérico_Y.Value == 11m) Numérico_Y.Value = 255m;
                    else Numérico_Y.Value = 255m;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Numérico_Z_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Middle)
                {
                    Numérico_Z.Value = 0m;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Barra_Estado_Etiqueta_Regiones_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Middle)
                {
                    if (Diccionario_Dimensiones_Lista_Posiciones_Regiones.ContainsKey(Variable_Dimensión) && Diccionario_Dimensiones_Lista_Posiciones_Regiones[Variable_Dimensión].Count > 0)
                    {
                        int Índice_Región = Program.Rand.Next(0, Diccionario_Dimensiones_Lista_Posiciones_Regiones[Variable_Dimensión].Count);
                        Ocupado = true;
                        Numérico_X.Value = Diccionario_Dimensiones_Lista_Posiciones_Regiones[Variable_Dimensión][Índice_Región].X * 512;
                        Numérico_Z.Value = Diccionario_Dimensiones_Lista_Posiciones_Regiones[Variable_Dimensión][Índice_Región].Y * 512;
                        Ocupado = false;
                        Pendiente_Dibujar_Mapa = true;
                    }
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Barra_Estado_Etiqueta_Coordenadas_XZ_Mínimas_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Middle)
                {
                    Ocupado = true;
                    Numérico_X.Value = Numérico_X.Minimum;
                    Numérico_Z.Value = Numérico_Z.Minimum;
                    Ocupado = false;
                    Pendiente_Dibujar_Mapa = true;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Barra_Estado_Etiqueta_Coordenadas_XZ_Máximas_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Middle)
                {
                    Ocupado = true;
                    Numérico_X.Value = Numérico_X.Maximum;
                    Numérico_Z.Value = Numérico_Z.Maximum;
                    Ocupado = false;
                    Pendiente_Dibujar_Mapa = true;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        internal Bitmap Obtener_Textura(string Nombre)
        {
            try
            {

            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
            return null;
        }

        private void Menú_Contextual_Restablecer_Ajustes_Click(object sender, EventArgs e)
        {
            try
            {
                if (MessageBox.Show(this, "Do you want to restore the settings to it's default values?", Program.Texto_Título_Versión, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    Registro_Restablecer_Opciones(); // Delete all the settings
                    Registro_Cargar_Opciones(); // Load the default settings
                    Registro_Guardar_Opciones(); // Save the defautl settings
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Barra_Estado_Botón_Excepción_Click(object sender, EventArgs e)
        {
            try
            {
                Variable_Excepción = false;
                Variable_Excepción_Imagen = false;
                Variable_Excepción_Total = 0;
                Barra_Estado_Botón_Excepción.Visible = false;
                Barra_Estado_Separador_1.Visible = false;
                Barra_Estado_Botón_Excepción.Image = Resources.Excepción_Gris;
                Barra_Estado_Botón_Excepción.ForeColor = Color.Black;
                Barra_Estado_Botón_Excepción.Text = "Exceptions: 0";
                Ventana_Depurador_Excepciones Ventana = new Ventana_Depurador_Excepciones();
                Ventana.ShowDialog(this);
                Ventana.Dispose();
                Ventana = null;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Temporizador_Principal_Tick(object sender, EventArgs e)
        {
            try
            {
                int Tick = Environment.TickCount;
                try
                {
                    if (Variable_Excepción)
                    {
                        if ((Environment.TickCount / 500) % 2 == 0)
                        {
                            if (!Variable_Excepción_Imagen)
                            {
                                Variable_Excepción_Imagen = true;
                                Barra_Estado_Botón_Excepción.Image = Resources.Excepción;
                                Barra_Estado_Botón_Excepción.ForeColor = Color.Red;
                                Barra_Estado_Botón_Excepción.Text = "Exceptions: " + Program.Traducir_Número(Variable_Excepción_Total);
                            }
                        }
                        else
                        {
                            if (Variable_Excepción_Imagen)
                            {
                                Variable_Excepción_Imagen = false;
                                Barra_Estado_Botón_Excepción.Image = Resources.Excepción_Gris;
                                Barra_Estado_Botón_Excepción.ForeColor = Color.Black;
                                Barra_Estado_Botón_Excepción.Text = "Exceptions: " + Program.Traducir_Número(Variable_Excepción_Total);
                            }
                        }
                        if (!Barra_Estado_Botón_Excepción.Visible) Barra_Estado_Botón_Excepción.Visible = true;
                        if (!Barra_Estado_Separador_1.Visible) Barra_Estado_Separador_1.Visible = true;
                    }
                }
                catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
                try
                {
                    try
                    {
                        if (Tick % 250 == 0) // Only update every quarter second
                        {
                            if (Program.Rendimiento_Procesador != null)
                            {
                                double CPU = (double)Program.Rendimiento_Procesador.NextValue();
                                if (CPU < 0d) CPU = 0d;
                                else if (CPU > 100d) CPU = 100d;
                                Barra_Estado_Etiqueta_CPU.Text = "CPU: " + Program.Traducir_Número_Decimales_Redondear(CPU, 2) + " %";
                            }
                            Program.Proceso.Refresh();
                            long Memoria_Bytes = Program.Proceso.PagedMemorySize64;
                            Barra_Estado_Etiqueta_Memoria.Text = "RAM: " + Program.Traducir_Tamaño_Bytes_Automático(Memoria_Bytes, 2, true);
                            if (Memoria_Bytes < 4294967296L) // < 4 GB
                            {
                                if (Variable_Memoria)
                                {
                                    Variable_Memoria = false;
                                    Barra_Estado_Etiqueta_Memoria.ForeColor = Color.Black;
                                }
                            }
                            else // >= 4 GB
                            {
                                if ((Environment.TickCount / 500) % 2 == 0)
                                {
                                    if (!Variable_Memoria)
                                    {
                                        Variable_Memoria = true;
                                        Barra_Estado_Etiqueta_Memoria.ForeColor = Color.Red;
                                    }
                                }
                                else
                                {
                                    if (Variable_Memoria)
                                    {
                                        Variable_Memoria = false;
                                        Barra_Estado_Etiqueta_Memoria.ForeColor = Color.Black;
                                    }
                                }
                            }
                        }
                    }
                    catch { Barra_Estado_Etiqueta_Memoria.Text = "RAM: ? MB (? GB)"; }
                }
                catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
                long Milisegundo_FPS = Cronómetro_FPS.ElapsedMilliseconds;
                long Segundo_FPS = Milisegundo_FPS / 1000L;
                if (Segundo_FPS != Segundo_FPS_Anterior)
                {
                    Segundo_FPS_Anterior = Segundo_FPS;
                    FPS_Real = FPS_Temporal;
                    Barra_Estado_Etiqueta_FPS.Text = FPS_Real.ToString() + " FPS";
                    FPS_Temporal = 0L;
                }
                FPS_Temporal++;
                if (!string.IsNullOrEmpty(Ruta_Pendiente_Abrir))
                {
                    if (!Subproceso_Activo)
                    {
                        Ruta_Nivel = Ruta_Pendiente_Abrir;
                        Ruta_Pendiente_Abrir = null;
                        Abrir_Ruta_Nivel();
                        return;
                    }
                    else
                    {
                        Pendiente_Subproceso_Abortar = true;
                        return;
                    }
                }
                if (!string.IsNullOrEmpty(Ruta_Nivel) && Picture.BackgroundImage != null && Picture.Image != null)
                {
                    if (!Subproceso_Activo)
                    {
                        if (Pintar != null)
                        {
                            Pintar.Dispose();
                            Pintar = null;
                        }
                        if (Pintar_Superior != null)
                        {
                            Pintar_Superior.Dispose();
                            Pintar_Superior = null;
                        }
                        //if (Picture.BackColor.GetHashCode() != Color_Fondo.GetHashCode()) Picture.BackColor = Color_Fondo;
                        if (Pendiente_Invertir_Mapa)
                        {
                            Pendiente_Invertir_Mapa = false;
                            BitmapData Bitmap_Data = ((Bitmap)Picture.BackgroundImage).LockBits(new Rectangle(0, 0, Ancho_Cliente, Alto_Cliente), ImageLockMode.ReadWrite, PixelFormat.Format32bppArgb);
                            byte[] Matriz_Bytes = new byte[Math.Abs(Bitmap_Data.Stride) * Alto_Cliente];
                            Marshal.Copy(Bitmap_Data.Scan0, Matriz_Bytes, 0, Matriz_Bytes.Length);
                            for (int Y = 0, Índice = 0; Y < Alto_Cliente; Y++)
                            {
                                for (int X = 0; X < Ancho_Cliente; X++, Índice += 4)
                                {
                                    if (Matriz_Bytes[Índice + 3] > 0) // Negativizar los píxeles no transparentes
                                    {
                                        Matriz_Bytes[Índice + 2] = (byte)(255 - Matriz_Bytes[Índice + 2]);
                                        Matriz_Bytes[Índice + 1] = (byte)(255 - Matriz_Bytes[Índice + 1]);
                                        Matriz_Bytes[Índice] = (byte)(255 - Matriz_Bytes[Índice]);
                                    }
                                }
                            }
                            Marshal.Copy(Matriz_Bytes, 0, Bitmap_Data.Scan0, Matriz_Bytes.Length);
                            ((Bitmap)Picture.BackgroundImage).UnlockBits(Bitmap_Data);
                            Bitmap_Data = null;
                            Matriz_Bytes = null;
                            Picture.Invalidate();
                            Picture.Update();
                        }
                        if (Pendiente_Vaciar_Toda_Caché)
                        {
                            Pendiente_Vaciar_Toda_Caché = false;
                            foreach (KeyValuePair<string, string> Entrada in Diccionario_Dimensiones_Rutas)
                            {
                                Diccionario_Dimensiones_Caché_Regiones[Entrada.Key].Clear();
                            }
                            GC.Collect();
                            GC.GetTotalMemory(true);
                        }
                        if (Pendiente_Guardar_Imagen_PNG)
                        {
                            Pendiente_Guardar_Imagen_PNG = false;
                            Bitmap Imagen = new Bitmap(Ancho_Cliente, Alto_Cliente, PixelFormat.Format24bppRgb);
                            Pintar = Graphics.FromImage(Imagen);
                            Pintar.Clear(Variable_Color_Fondo);
                            Pintar.CompositingMode = CompositingMode.SourceOver;
                            Pintar.DrawImage(Picture.BackgroundImage, new Rectangle(0, 0, Ancho_Cliente, Alto_Cliente), new Rectangle(0, 0, Ancho_Cliente, Alto_Cliente), GraphicsUnit.Pixel); // Background.
                            Pintar.DrawImage(Picture.Image, new Rectangle(0, 0, Ancho_Cliente, Alto_Cliente), new Rectangle(0, 0, Ancho_Cliente, Alto_Cliente), GraphicsUnit.Pixel); // Overlay.
                            Pintar.Dispose();
                            Pintar = null;
                            Program.Crear_Carpetas(Program.Ruta_Guardado_Imágenes_Realistic_World_Viewer_2D);
                            if (Directory.Exists(Program.Ruta_Guardado_Imágenes_Realistic_World_Viewer_2D))
                            {
                                string Ruta = Program.Ruta_Guardado_Imágenes_Realistic_World_Viewer_2D + "\\" + Program.Obtener_Nombre_Temporal_Sin_Guiones() + " Map (" + ComboBox_Mapa.Text + (Variable_Mapa_3D ? " 3D " : " 2D ") + Variable_Dimensión.ToString().Replace('_', ' ') + ") [XYZ " + Program.Traducir_Número(Variable_X) + ", " + Program.Traducir_Número(Variable_Y) + ", " + Program.Traducir_Número(Variable_Z) + "].png";
                                try
                                {
                                    Imagen.Save(Ruta, ImageFormat.Png);
                                    try { Process.Start(Ruta); }
                                    catch { }
                                    SystemSounds.Asterisk.Play();
                                }
                                catch { MessageBox.Show(this, "The program couldn't save the map to:\r\n" + Ruta + ".\r\nPlease try it again later and make sure you have the right privileges.", Program.Texto_Título_Versión, MessageBoxButtons.OK, MessageBoxIcon.Warning); }
                                Ruta = null;
                            }
                            else MessageBox.Show(this, "The program couldn't create the save folder for the map at:\r\n" + Program.Ruta_Guardado_Imágenes_Realistic_World_Viewer_2D + ".\r\nPlease try it again later and make sure you have the right privileges.", Program.Texto_Título_Versión, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            Imagen.Dispose();
                            Imagen = null;
                        }
                        if (Pendiente_Copiar_Portapapeles)
                        {
                            Pendiente_Copiar_Portapapeles = false;
                            Bitmap Imagen = new Bitmap(Ancho_Cliente, Alto_Cliente, PixelFormat.Format24bppRgb);
                            Pintar = Graphics.FromImage(Imagen);
                            Pintar.Clear(Variable_Color_Fondo);
                            Pintar.CompositingMode = CompositingMode.SourceOver;
                            Pintar.DrawImage(Picture.BackgroundImage, new Rectangle(0, 0, Ancho_Cliente, Alto_Cliente), new Rectangle(0, 0, Ancho_Cliente, Alto_Cliente), GraphicsUnit.Pixel); // Background.
                            Pintar.DrawImage(Picture.Image, new Rectangle(0, 0, Ancho_Cliente, Alto_Cliente), new Rectangle(0, 0, Ancho_Cliente, Alto_Cliente), GraphicsUnit.Pixel); // Overlay.
                            Pintar.Dispose();
                            Pintar = null;
                            try
                            {
                                Clipboard.SetImage(Imagen);
                                SystemSounds.Asterisk.Play();
                            }
                            catch { MessageBox.Show(this, "The program couldn't copy the map to the clipboard.\r\nPlease try it again in a while.", Program.Texto_Título_Versión, MessageBoxButtons.OK, MessageBoxIcon.Warning); }
                            Imagen.Dispose();
                            Imagen = null;
                        }
                        if (Pendiente_Copiar_Ventana_Portapapeles)
                        {
                            Pendiente_Copiar_Ventana_Portapapeles = false;
                            Bitmap Imagen = new Bitmap(this.Width, this.Height, PixelFormat.Format24bppRgb);
                            this.DrawToBitmap(Imagen, new Rectangle(0, 0, this.Width, this.Height));
                            try
                            {
                                Clipboard.SetImage(Imagen);
                                SystemSounds.Asterisk.Play();
                            }
                            catch { MessageBox.Show(this, "The program couldn't copy the map to the clipboard.\r\nPlease try it again in a while.", Program.Texto_Título_Versión, MessageBoxButtons.OK, MessageBoxIcon.Warning); }
                            Imagen.Dispose();
                            Imagen = null;
                        }
                        if (Pendiente_Redimensionar_Mapa)
                        {
                            Pendiente_Redimensionar_Mapa = false;
                            if (!Variable_Dibujar_Mundo_Completo)
                            {
                                Picture.BackgroundImage = new Bitmap(Ancho_Cliente, Alto_Cliente, PixelFormat.Format32bppArgb);
                                Picture.Image = new Bitmap(Ancho_Cliente, Alto_Cliente, PixelFormat.Format32bppArgb);
                            }
                        }
                    }
                    if (Pendiente_Dibujar_Mapa && !Ocupado)
                    {
                        if (!Subproceso_Activo)
                        {
                            if (Pendiente_Subproceso_Abortar)
                            {
                                Minecraft.Pendiente_Subproceso_Abortar = false;
                                Pendiente_Subproceso_Abortar = false;
                            }
                            /*if (Pendiente_Vaciar_Caché_Overworld)
                            {
                                Diccionario_Caché_Regiones_Overworld.Clear();
                                Pendiente_Vaciar_Caché_Overworld = false;
                            }
                            if (Pendiente_Vaciar_Caché_Nether)
                            {
                                Diccionario_Caché_Regiones_Nether.Clear();
                                Pendiente_Vaciar_Caché_Nether = false;
                            }
                            if (Pendiente_Vaciar_Caché_The_End)
                            {
                                Diccionario_Caché_Regiones_The_End.Clear();
                                Pendiente_Vaciar_Caché_The_End = false;
                            }*/
                            if (!Pendiente_Subproceso_Abortar_Global)
                            {
                                Pendiente_Dibujar_Mapa = false;
                                Subproceso_Activo = true;
                                Pintar = Graphics.FromImage(Picture.BackgroundImage);
                                Pintar.CompositingMode = CompositingMode.SourceCopy;
                                Pintar.CompositingQuality = CompositingQuality.HighQuality;
                                Pintar.InterpolationMode = InterpolationMode.NearestNeighbor;
                                Pintar.PixelOffsetMode = PixelOffsetMode.HighQuality;
                                Pintar.Clear(Color.Transparent);
                                Pintar_Superior = Graphics.FromImage(Picture.Image);
                                Pintar_Superior.CompositingMode = CompositingMode.SourceOver;
                                Pintar_Superior.CompositingQuality = CompositingQuality.HighQuality;
                                Pintar_Superior.InterpolationMode = InterpolationMode.NearestNeighbor;
                                Pintar_Superior.PixelOffsetMode = PixelOffsetMode.HighQuality;
                                Pintar_Superior.Clear(Color.Transparent);
                                Picture.Invalidate();
                                Picture.Update();
                                this.Cursor = Cursors.WaitCursor;
                                Subproceso = new Thread(new ParameterizedThreadStart(Subproceso_DoWork));
                                Subproceso.IsBackground = true;
                                Subproceso.Priority = ThreadPriority.Normal;
                                Subproceso.Start();
                            }
                            else
                            {
                                Temporizador_Principal.Stop();
                                this.Close();
                            }
                        }
                        else if (!Pendiente_Subproceso_Abortar)
                        {
                            Minecraft.Pendiente_Subproceso_Abortar = true;
                            Pendiente_Subproceso_Abortar = true;
                        }
                    }
                }
                else if (Pendiente_Dibujar_Mapa) Pendiente_Dibujar_Mapa = false; // Si no hay un mapa cargado cancelar el dibujo cada vez
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        internal void Subproceso_DoWork(object Objeto)
        {
            try
            {
                Stopwatch Cronómetro = Stopwatch.StartNew();
                Mapas Variable_Temporal_Mapa = Variable_Mapa;
                bool Variable_Temporal_Mapa_3D = Variable_Mapa_3D;
                string Variable_Temporal_Dimensión = Variable_Dimensión;
                int Variable_Temporal_Zoom = Variable_Zoom;
                string Variable_Temporal_Bloque = Variable_Bloque;
                short Variable_Temporal_Bloque_ID = !string.IsNullOrEmpty(Variable_Temporal_Bloque) && Minecraft.Diccionario_Bloques_Nombres_Índices.ContainsKey(Variable_Temporal_Bloque) ? Minecraft.Diccionario_Bloques_Nombres_Índices[Variable_Temporal_Bloque] : (short)-1;
                int Variable_Temporal_X = Variable_X;
                int Variable_Temporal_Y = Variable_Y;
                int Variable_Temporal_Z = Variable_Z;

                bool Habilitar_Cargar_IDs = true; // Load everything at once (watch the RAM use).
                bool Habilitar_Cargar_Luz_Bloques = true;
                bool Habilitar_Cargar_Luz_Cielo = true;
                bool Habilitar_Cargar_Biomas = true;
                bool Habilitar_Cargar_Mapa_Altura = true;

                int Zoom = Variable_Temporal_Zoom; //(int)Math.Pow(2d, (double)ComboBox_Zoom.SelectedIndex);
                int Zoom_16 = 16 * Variable_Temporal_Zoom;
                int Zoom_512 = 512 * Variable_Temporal_Zoom;
                int X = (Variable_Temporal_X / 16) * 16;
                int Y = Variable_Temporal_Y;
                int Z = (Variable_Temporal_Z / 16) * 16;
                
                Rectangle Rectángulo = new Rectangle(0, 0, Zoom, Zoom);
                Dictionary<Point, Point> Diccionario_Posiciones_Regiones_Bloques = new Dictionary<Point, Point>();
                int Chunks_Ancho = 0;
                int Chunks_Alto = 0;
                List<Point> Lista_Posiciones_Regiones = new List<Point>();
                List<List<Point>> Lista_Posiciones_Chunks = new List<List<Point>>();
                List<List<Point>> Lista_Posiciones_Pintar = new List<List<Point>>();

                if (!Variable_Dibujar_Mundo_Completo)
                {
                    // La coordenada seleccionada arriba está por la mitad del área cliente del Picture...
                    int Mitad_Ancho_Cliente = (Ancho_Cliente / 2) + (Ancho_Cliente % 2 == 0 ? 0 : 1);
                    int Mitad_Alto_Cliente = (Alto_Cliente / 2) + (Alto_Cliente % 2 == 0 ? 0 : 1);
                    //if (Mitad_Ancho_Cliente * 2 < Ancho_Cliente) Mitad_Ancho_Cliente++;
                    //if (Mitad_Alto_Cliente * 2 < Alto_Cliente) Mitad_Alto_Cliente++;
                    //if (Mitad_Ancho_Cliente % Zoom_16 != 0) Mitad_Ancho_Cliente += Zoom_16 - (Mitad_Ancho_Cliente % Zoom_16);
                    //if (Mitad_Alto_Cliente % Zoom_16 != 0) Mitad_Alto_Cliente += Zoom_16 - (Mitad_Alto_Cliente % Zoom_16);

                    int Región_Central_X = (X / 512) * 512;
                    int Región_Central_Z = (Z / 512) * 512;
                    if (Región_Central_X > X) Región_Central_X -= 512;
                    if (Región_Central_Z > Z) Región_Central_Z -= 512;

                    int Mitad_Ancho_Cliente_Zoom = 0;
                    int Mitad_Alto_Cliente_Zoom = 0;
                    int Pantalla_X = Mitad_Ancho_Cliente;
                    int Pantalla_Z = Mitad_Alto_Cliente;
                    int Mitad_Ancho_Cliente_Zoom2 = 0;
                    int Mitad_Alto_Cliente_Zoom2 = 0;
                    int Pantalla_Ancho = Mitad_Ancho_Cliente;
                    int Pantalla_Alto = Mitad_Alto_Cliente;

                    int Inicio_Bloque_X = X;
                    int Inicio_Bloque_Z = Z;
                    int Fin_Bloque_X = X;
                    int Fin_Bloque_Z = Z;
                    while (Pantalla_X > 0)
                    {
                        Inicio_Bloque_X--;
                        Pantalla_X -= Zoom;
                        Mitad_Ancho_Cliente_Zoom += Zoom;
                    }
                    while (Pantalla_Z > 0)
                    {
                        Inicio_Bloque_Z--;
                        Pantalla_Z -= Zoom;
                        Mitad_Alto_Cliente_Zoom += Zoom;
                    }
                    while (Pantalla_Ancho + Zoom < Ancho_Cliente)
                    {
                        Fin_Bloque_X++;
                        Pantalla_Ancho += Zoom;
                        Mitad_Ancho_Cliente_Zoom2 += Zoom;
                    }
                    while (Pantalla_Alto + Zoom < Alto_Cliente)
                    {
                        Fin_Bloque_Z++;
                        Pantalla_Alto += Zoom;
                        Mitad_Alto_Cliente_Zoom2 += Zoom;
                    }

                    /*int Regiones_Movidas_X = Mitad_Ancho_Cliente_Zoom / Zoom_512;
                    int Regiones_Movidas_Z = Mitad_Alto_Cliente_Zoom / Zoom_512;
                    if (Regiones_Movidas_X * Zoom_512 < Mitad_Ancho_Cliente_Zoom) Regiones_Movidas_X++;
                    if (Regiones_Movidas_Z * Zoom_512 < Mitad_Alto_Cliente_Zoom) Regiones_Movidas_Z++;*/

                    int Región_Inicial_X = Inicio_Bloque_X / 512;
                    int Región_Inicial_Z = Inicio_Bloque_Z / 512;
                    if (Región_Inicial_X * 512 < Inicio_Bloque_X) Región_Inicial_X++;
                    if (Región_Inicial_Z * 512 < Inicio_Bloque_Z) Región_Inicial_Z++;

                    int Origen_X = X - Mitad_Ancho_Cliente_Zoom; // Pantalla
                    int Origen_Z = Z - Mitad_Alto_Cliente_Zoom;
                    int Destino_X = X + Mitad_Ancho_Cliente_Zoom2;
                    int Destino_Z = Z + Mitad_Alto_Cliente_Zoom2;

                    int Origen_Región_X = Origen_X / Zoom_512;
                    int Origen_Región_Z = Origen_Z / Zoom_512;
                    if (Origen_Región_X * Zoom_512 > Origen_X) Origen_Región_X--;
                    if (Origen_Región_Z * Zoom_512 > Origen_Z) Origen_Región_Z--;
                    //MessageBox.Show(Origen_Región_X.ToString() + ", " + Origen_Región_Z.ToString() + "\r\n" + Región_Inicial_X.ToString() + ", " + Región_Inicial_Z.ToString() + "\r\n" + Pantalla_X.ToString() + ", " + Pantalla_Y.ToString() + "\r\n" + Mitad_Ancho_Cliente_Zoom.ToString() + ", " + Mitad_Alto_Cliente_Zoom.ToString() + "\r\n" + Rectángulo_Pantalla.ToString(), "XY Pantalla");

                    //int Chunk_X_Origen = X - Mitad_Ancho_Cliente;
                    //int Chunk_Z_Origen = Z - Mitad_Alto_Cliente;
                    //Picture.BackgroundImage = new Bitmap(Ancho_Cliente, Alto_Cliente, PixelFormat.Format32bppArgb);
                    //Graphics Pintar = Graphics.FromImage(Picture.BackgroundImage);
                    //Pintar.CompositingMode = CompositingMode.SourceCopy;

                    // Si XZ seleccionado es el centro de la pantalla +1...
                    // Restar la mitad de la pantalla (cliente) para obtener el inicio XZ
                    // en bloques y sumarle la pantalla para obtener el rectángulo total a dibujar.

                    //Rectangle Rectángulo_Chunk = new Rectangle(0, 0, Zoom_16, Zoom_16);

                    Chunks_Ancho = Ancho_Cliente / Zoom_16;
                    if (Chunks_Ancho * Zoom_16 < Ancho_Cliente) Chunks_Ancho++;
                    Chunks_Alto = Alto_Cliente / Zoom_16;
                    if (Chunks_Alto * Zoom_16 < Alto_Cliente) Chunks_Alto++;

                    //MessageBox.Show(Chunks_Ancho.ToString() + ", " + Chunks_Alto.ToString());
                    //MessageBox.Show(Mitad_Ancho_Cliente.ToString(), Mitad_Alto_Cliente.ToString());

                    // Precalcular las regiones que se van a dibujar parcial o completamente:

                    //List<Minecraft.Regiones> Lista_Regiones = new List<Minecraft.Regiones>();
                    //Dictionary<int, List<Point>> Diccionario_Regiones_Índices_Chunks = new Dictionary<int, List<Point>>();
                    //Rectangle Rectángulo_Cliente = new Rectangle(X_Origen, Z_Origen, Ancho_Cliente, Alto_Cliente);
                    
                    // Nuevo sistema: empezar en el bloque de más arriba a la izquierda que se vea en la
                    // pantalla y seguir horizontalmente y luego verticalmente como la iteración de una
                    // imagen, y para cada bloque, calcular su chunk y su región, y añadirlos si aún no
                    // están en sus respectivas listas y almacenar en una lista paralela las posiciones
                    // de dibujo de cada chunk para cada región para soportar el orden aleatorio.
                    
                    //MessageBox.Show(((Fin_Bloque_X - Inicio_Bloque_X) + 1).ToString());
                    //MessageBox.Show(((Fin_Bloque_Z - Inicio_Bloque_Z) + 1).ToString());

                    //MessageBox.Show(Inicio_Bloque_X.ToString() + ", " + Inicio_Bloque_Z.ToString());
                    //MessageBox.Show(Pantalla_X.ToString() + ", " + Pantalla_Z.ToString());

                    // 2018_03_16_08_39_49_779:
                    int Rectángulo_X = Mitad_Ancho_Cliente / Zoom;
                    int Rectángulo_Z = Mitad_Alto_Cliente / Zoom;
                    if (Rectángulo_X * Zoom < Mitad_Ancho_Cliente) Rectángulo_X++;
                    if (Rectángulo_Z * Zoom < Mitad_Alto_Cliente) Rectángulo_Z++;

                    int Longitud_X = (Rectángulo_X * 2) + Zoom_512;
                    int Longitud_Z = (Rectángulo_Z * 2) + Zoom_512;

                    int Bloque_Inicio_X = X - Rectángulo_X;
                    int Bloque_Inicio_Z = Z - Rectángulo_Z;

                    int Región_Inicio_X = Bloque_Inicio_X / 512;
                    int Región_Inicio_Z = Bloque_Inicio_Z / 512;
                    if ((Región_Inicio_X * 512) > Bloque_Inicio_X) Región_Inicio_X--;
                    if ((Región_Inicio_Z * 512) > Bloque_Inicio_Z) Región_Inicio_Z--;

                    //MessageBox.Show("Pintar en pantalla desde: " + Rectángulo_X.ToString() + ", " + Rectángulo_Z.ToString());

                    Rectángulo_X = Mitad_Ancho_Cliente - (Rectángulo_X * Zoom);
                    Rectángulo_Z = Mitad_Alto_Cliente - (Rectángulo_Z * Zoom);

                    // Calcular XZ de origen de región de inicio:
                    //Rectangle Rectángulo_Pantalla = new Rectangle(Rectángulo_X, Rectángulo_Z, Longitud_X, Longitud_Z);
                    Rectangle Rectángulo_Pantalla = new Rectangle(0, 0, Ancho_Cliente, Alto_Cliente);
                    if (Rectángulo_X > Región_Inicio_X * 512) Rectángulo_X -= Rectángulo_X - (Región_Inicio_X * 512);
                    if (Rectángulo_Z > Región_Inicio_Z * 512) Rectángulo_Z -= Rectángulo_Z - (Región_Inicio_Z * 512);

                    int Bloque_Región_Inicio_X = Región_Inicio_X * 512;
                    int Bloque_Región_Inicio_Z = Región_Inicio_Z * 512;

                    /*MessageBox.Show("Pintar en pantalla desde: " + Rectángulo_X.ToString() + ", " + Rectángulo_Z.ToString() + "\r\n" +
                        "Cargar desde el bloque: " + Bloque_Inicio_X.ToString() + ", " + Bloque_Inicio_Z.ToString() + "\r\n" +
                        "Cargar desde la región: " + Región_Inicio_X.ToString() + ", " + Región_Inicio_Z.ToString() + "\r\n" +
                        "Bloque de la 1ª región: " + Bloque_Región_Inicio_X.ToString() + ", " + Bloque_Región_Inicio_Z.ToString() + "\r\n" +
                        "Longitudes: " + Longitud_X.ToString() + ", " + Longitud_Z.ToString() + "\r\n" +
                        Rectángulo_Pantalla.ToString(),
                        Mitad_Ancho_Cliente.ToString() + ", " + Mitad_Alto_Cliente.ToString());
                        */
                    // ...

                    /*MessageBox.Show(Variable_Temporal_Zoom.ToString());
                    Variable_Temporal_Zoom = 256;
                    Zoom = 256;
                    Zoom_16 = 256 * 16;
                    Zoom_512 = 512 * 256;
                    Variable_Temporal_X = -333;
                    Variable_Temporal_Z = -222;
                    X = -333;
                    Z = -222;*/

                    int Ancho_Mitad = Ancho_Cliente / 2;
                    int Alto_Mitad = Alto_Cliente / 2;

                    int X1 = Ancho_Mitad / Variable_Zoom;
                    if (X1 * Variable_Zoom < Ancho_Mitad) X1++;
                    int XX1 = X1 * Variable_Zoom;
                    int XXX1 = Ancho_Mitad - XX1;
                    int Resto_X = Ancho_Mitad % Zoom_16;
                    if (Resto_X > 0) XXX1 -= (Zoom_16 - Resto_X);

                    int Z1 = Alto_Mitad / Variable_Zoom;
                    if (Z1 * Variable_Zoom < Alto_Mitad) Z1++;
                    int ZZ1 = Z1 * Variable_Zoom;
                    int ZZZ1 = Alto_Mitad - ZZ1;
                    int Resto_Z = Alto_Mitad % Zoom_16;
                    if (Resto_Z > 0) ZZZ1 -= (Zoom_16 - Resto_Z);

                    int XXXX1 = Variable_Temporal_X - X1;
                    int ZZZZ1 = Variable_Temporal_Z - Z1;

                    // Readjust the XZ coordinates to center them on the screen:
                    /*int X_Centro = (Variable_Temporal_X % 16);
                    int Z_Centro = (Variable_Temporal_Z % 16);
                    if (X_Centro > 0)
                    {
                        XXX1 -= X_Centro * Zoom;
                        XXXX1 -= X_Centro;
                    }
                    if (Z_Centro > 0)
                    {
                        ZZZ1 -= Z_Centro * Zoom;
                        ZZZZ1 -= Z_Centro;
                    }*/

                    if (Zoom == 1) // Finish it...
                    {
                        XXX1 -= (Variable_Temporal_X % 16) * Zoom;
                        ZZZ1 -= (Variable_Temporal_Z % 16) * Zoom;
                        XXXX1 -= (Variable_Temporal_X % 16) * Zoom;
                        ZZZZ1 -= (Variable_Temporal_Z % 16) * Zoom;
                    }

                    /*// 2018_05_09_15_31_15_945:
                    int Ancho_2 = (int)Math.Round((double)Ancho_Cliente / 2d, MidpointRounding.AwayFromZero);
                    int Alto_2 = (int)Math.Round((double)Alto_Cliente / 2d, MidpointRounding.AwayFromZero);

                    int XX = Ancho_2 / Zoom;
                    if (XX * Zoom < Ancho_2) XX++;
                    XX = XX - (Variable_Temporal_X % 16);

                    int ZZ = Alto_2 / Zoom;
                    if (ZZ * Zoom < Alto_2) ZZ++;
                    ZZ = ZZ - (Variable_Temporal_Z % 16);

                    int XXX = Variable_Temporal_X - XX;
                    int ZZZ = Variable_Temporal_Z - ZZ;

                    XXXX1 = XXX / 16;
                    if (XXX < 0) XXXX1--;

                    ZZZZ1 = ZZZ / 16;
                    if (ZZZ < 0) ZZZZ1--;

                    XXX1 -= XX * Zoom;
                    ZZZ1 -= ZZ * Zoom;*/

                    /*int Ancho = Picture.ClientSize.Width;
                    int Alto = Picture.ClientSize.Height;
                    int X = e.X;
                    int Z = e.Y;
                    if (X < 0) X = 0;
                    else if (X >= Ancho) X = Ancho - 1;
                    if (Z < 0) Z = 0;
                    else if (Z >= Alto) Z = Alto - 1;
                    int Ancho_2 = (int)Math.Round((double)Ancho / 2d, MidpointRounding.AwayFromZero);
                    int Alto_2 = (int)Math.Round((double)Alto / 2d, MidpointRounding.AwayFromZero);
                    int Diferencia_X_Centro = Ancho_2 - X;
                    int Diferencia_Z_Centro = Alto_2 - Z;
                    X = Variable_X - (Diferencia_X_Centro / Variable_Zoom);
                    Z = Variable_Z - (Diferencia_Z_Centro / Variable_Zoom);*/

                    // Aire y cuevas:
                    //int Ancho_Aire_Cuevas = (Ancho_Cliente + 32) / Zoom;
                    //int Alto_Aire_Cuevas = (Alto_Cliente + 32) / Zoom;
                    //if (Ancho_Aire_Cuevas * Zoom < Ancho_Cliente + 32) Ancho_Aire_Cuevas++;
                    //if (Alto_Aire_Cuevas * Zoom < Alto_Cliente + 32) Alto_Aire_Cuevas++;

                    for (int Índice_Z = 0, Chunk_Z = ZZZZ1, Pintar_Z = ZZZ1; Índice_Z < Alto_Cliente * 2; Índice_Z += 1, Chunk_Z += 16, Pintar_Z += Zoom_16)
                    {
                        for (int Índice_X = 0, Chunk_X = XXXX1, Pintar_X = XXX1; Índice_X < Ancho_Cliente * 2; Índice_X += 1, Chunk_X += 16, Pintar_X += Zoom_16)
                        {
                            if (Pendiente_Subproceso_Abortar) return;
                            int Valor_X_Chunk = Math.Abs(Chunk_X) % 32; // De 0 a 31
                            int Valor_X_Región = Chunk_X / 512; // Infinito
                            if (Valor_X_Región * 512 > Chunk_X)
                            {
                                //Valor_X_Chunk--;
                                Valor_X_Región--;
                            }
                            int Valor_Z_Chunk = Math.Abs(Chunk_Z) % 32;
                            int Valor_Z_Región = Chunk_Z / 512;
                            if (Valor_Z_Región * 512 > Chunk_Z)
                            {
                                //Valor_Z_Chunk--;
                                Valor_Z_Región--;
                            }

                            int Chunk_Xs = Math.Abs(((Valor_X_Región * 512) - Chunk_X)) / 16;
                            int Chunk_Zs = Math.Abs(((Valor_Z_Región * 512) - Chunk_Z)) / 16;

                            Rectangle Rectángulo_Chunk = new Rectangle(Pintar_X, Pintar_Z, Zoom_16, Zoom_16);
                            if (Rectángulo_Chunk.IntersectsWith(Rectángulo_Pantalla))
                            {
                                Point Posición_Región = new Point(Valor_X_Región, Valor_Z_Región);
                                //if (Diccionario_Dimensiones_Lista_Posiciones_Regiones[Variable_Temporal_Dimensión].Contains(Posición_Región)) // 2018_09_18_10_58_07_637
                                {
                                    if (!Lista_Posiciones_Regiones.Contains(Posición_Región))
                                    {
                                        Lista_Posiciones_Regiones.Add(Posición_Región);
                                        Lista_Posiciones_Chunks.Add(new List<Point>());
                                        Lista_Posiciones_Pintar.Add(new List<Point>());
                                    }
                                    int Índice_Región = Lista_Posiciones_Regiones.IndexOf(Posición_Región);
                                    //Point Posición_Chunk = new Point(Valor_X_Chunk, Valor_Z_Chunk);
                                    Point Posición_Chunk = new Point(Chunk_Xs, Chunk_Zs);
                                    Point Posición_Pintar = new Point(Pintar_X, Pintar_Z);
                                    if (!Lista_Posiciones_Chunks[Índice_Región].Contains(Posición_Chunk))
                                    {
                                        Lista_Posiciones_Chunks[Índice_Región].Add(Posición_Chunk);
                                        Lista_Posiciones_Pintar[Índice_Región].Add(Posición_Pintar);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    //MessageBox.Show(Diccionario_Dimensiones_Lista_Posiciones_Regiones[Variable_Temporal_Dimensión].Count.ToString());
                    int Mínimo_X = int.MaxValue;
                    int Máximo_X = int.MinValue;
                    int Mínimo_Z = int.MaxValue;
                    int Máximo_Z = int.MinValue;
                    foreach (Point Posición in Diccionario_Dimensiones_Lista_Posiciones_Regiones[Variable_Temporal_Dimensión])
                    {
                        if (Posición.X < Mínimo_X) Mínimo_X = Posición.X;
                        if (Posición.X > Máximo_X) Máximo_X = Posición.X;
                        if (Posición.Y < Mínimo_Z) Mínimo_Z = Posición.Y;
                        if (Posición.Y > Máximo_Z) Máximo_Z = Posición.Y;
                    }
                    for (int Región_Z = Mínimo_Z, Pintar_Z = 0; Región_Z <= Máximo_Z; Región_Z++, Pintar_Z += 512, Chunks_Alto += 32)
                    {
                        Chunks_Ancho = 0;
                        for (int Región_X = Mínimo_X, Pintar_X = 0; Región_X <= Máximo_X; Región_X++, Pintar_X += 512, Chunks_Ancho += 32)
                        {
                            Lista_Posiciones_Regiones.Add(new Point(Región_X, Región_Z));
                            Lista_Posiciones_Chunks.Add(new List<Point>());
                            Lista_Posiciones_Pintar.Add(new List<Point>());
                            int Índice_Región = Lista_Posiciones_Regiones.Count - 1;
                            for (int Chunk_Z = 0; Chunk_Z < 32; Chunk_Z++)
                            {
                                for (int Chunk_X = 0; Chunk_X < 32; Chunk_X++)
                                {
                                    Lista_Posiciones_Chunks[Índice_Región].Add(new Point(Chunk_X, Chunk_Z));
                                    Lista_Posiciones_Pintar[Índice_Región].Add(new Point((Pintar_X + (Chunk_X * 16)) * Zoom, (Pintar_Z + (Chunk_Z * 16)) * Zoom));
                                }
                            }
                        }
                    }
                }
                //MessageBox.Show(Lista_Posiciones_Regiones.Count.ToString());

                /*for (int Índice_Región_Z = Región_Inicio_Z, Índice_Pintar_Z = Rectángulo_Z, Índice_Z = 0; Índice_Z < Longitud_Z; Índice_Región_Z++, Índice_Pintar_Z += Zoom_512, Índice_Z += Zoom_512)
                {
                    for (int Índice_Región_X = Región_Inicio_X, Índice_Pintar_X = Rectángulo_X, Índice_X = 0; Índice_X < Longitud_X; Índice_Región_X++, Índice_Pintar_X += Zoom_512, Índice_X += Zoom_512)
                    {
                        if (Pendiente_Subproceso_Abortar) return;
                        Rectangle Rectángulo_Región = new Rectangle(Índice_Pintar_X, Índice_Pintar_Z, Zoom_512, Zoom_512);
                        if (Rectángulo_Región.IntersectsWith(Rectángulo_Pantalla)) // If any part of the region rectangle intersects with the screen, add it and analyze the same for each of it's chunks
                        {
                            Lista_Posiciones_Regiones.Add(new Point(Índice_Región_X, Índice_Región_Z));
                            Lista_Posiciones_Chunks.Add(new List<Point>());
                            Lista_Posiciones_Pintar.Add(new List<Point>());
                            for (int Índice_Chunk_Z = 0; Índice_Chunk_Z < 32; Índice_Chunk_Z++)
                            {
                                for (int Índice_Chunk_X = 0; Índice_Chunk_X < 32; Índice_Chunk_X++)
                                {
                                    if (Pendiente_Subproceso_Abortar) return;
                                    Rectangle Rectángulo_Chunk = new Rectangle(Índice_Pintar_X + (Índice_Chunk_X * Zoom_16), Índice_Pintar_Z + (Índice_Chunk_Z * Zoom_16), Zoom_16, Zoom_16);
                                    if (Rectángulo_Chunk.IntersectsWith(Rectángulo_Pantalla)) // If the current chunk rectangle intersects with the screen draw it
                                    {
                                        Lista_Posiciones_Chunks[Lista_Posiciones_Chunks.Count - 1].Add(new Point(Índice_Chunk_X, Índice_Chunk_Z));
                                        Lista_Posiciones_Pintar[Lista_Posiciones_Pintar.Count - 1].Add(new Point(Índice_Pintar_X + (Índice_Chunk_X * Zoom_16), Índice_Pintar_Z + (Índice_Chunk_Z * Zoom_16)));
                                    }
                                }
                            }
                        }
                    }
                }*/
                /*for (int Índice_Bloque_Z = Inicio_Bloque_Z, Índice_Pintar_Z = Pantalla_Z; Índice_Bloque_Z <= Fin_Bloque_Z; Índice_Bloque_Z++, Índice_Pintar_Z += Zoom)
                {
                    for (int Índice_Bloque_X = Inicio_Bloque_X, Índice_Pintar_X = Pantalla_X; Índice_Bloque_X <= Fin_Bloque_X; Índice_Bloque_X++, Índice_Pintar_X += Zoom)
                    {
                        int Índice_Región_X = Índice_Bloque_X / 512;
                        int Índice_Región_Z = Índice_Bloque_Z / 512;
                        if (Inicio_Bloque_X < 0 && Índice_Región_X * 512 < Índice_Bloque_X) Índice_Región_X--;
                        if (Inicio_Bloque_Z < 0 && Índice_Región_Z * 512 < Índice_Bloque_Z) Índice_Región_Z--;
                        int Índice_Chunk_X = Índice_Bloque_X / 16;
                        int Índice_Chunk_Z = Índice_Bloque_Z / 16;
                        if (Inicio_Bloque_X < 0 && Índice_Chunk_X * 16 < Índice_Bloque_X) Índice_Chunk_X--;
                        if (Inicio_Bloque_Z < 0 && Índice_Chunk_Z * 16 < Índice_Bloque_Z) Índice_Chunk_Z--;

                        Índice_Chunk_X = Math.Abs(Índice_Chunk_X) % 32;
                        Índice_Chunk_Z = Math.Abs(Índice_Chunk_Z) % 32;

                        Point Posición_Región = new Point(Índice_Región_X, Índice_Región_Z);
                        Point Posición_Chunk = new Point(Índice_Chunk_X, Índice_Chunk_Z);
                        Point Posición_Pintar = new Point(Índice_Pintar_X, Índice_Pintar_Z);
                        if (!Lista_Posiciones_Regiones.Contains(Posición_Región))
                        {
                            Lista_Posiciones_Regiones.Add(Posición_Región);
                            Lista_Posiciones_Chunks.Add(new List<Point>(new Point[] { Posición_Chunk }));
                            Lista_Posiciones_Pintar.Add(new List<Point>(new Point[] { Posición_Pintar }));
                        }
                        else
                        {
                            int Índice_Región = Lista_Posiciones_Regiones.IndexOf(Posición_Región);
                            if (!Lista_Posiciones_Chunks[Índice_Región].Contains(Posición_Chunk))
                            {
                                Lista_Posiciones_Chunks[Índice_Región].Add(Posición_Chunk);
                                Lista_Posiciones_Pintar[Índice_Región].Add(Posición_Pintar);
                            }
                        }
                    }
                }*/
                /*for (int Índice_Z = Origen_Z, Región_Actual_Z = Origen_Región_Z; Índice_Z <= Destino_Z; Índice_Z += Zoom_512, Región_Actual_Z++, Inicio_Bloque_Z += Zoom_512)
                {
                    for (int Índice_X = Origen_X, Región_Actual_X = Origen_Región_X; Índice_X <= Destino_X; Índice_X += Zoom_512, Región_Actual_X++, Inicio_Bloque_X += Zoom_512)
                    {
                        Lista_Posiciones_Regiones.Add(new Point(Región_Actual_X, Región_Actual_Z));
                        List<Point> Lista_Posiciones = new List<Point>();
                        for (int Índice_Chunk_Z = 0, Índice_Bloque_Chunk_Z = Inicio_Bloque_Z; Índice_Chunk_Z < 32; Índice_Chunk_Z++, Índice_Bloque_Chunk_Z += Zoom_16)
                        {
                            for (int Índice_Chunk_X = 0, Índice_Bloque_Chunk_X = Inicio_Bloque_X; Índice_Chunk_X < 32; Índice_Chunk_X++, Índice_Bloque_Chunk_X += Zoom_16)
                            {
                                if (Pendiente_Subproceso_Abortar) return;
                                //Rectangle Rectángulo_Temporal = new Rectangle(Índice_Bloque_Chunk_X, Índice_Bloque_Chunk_Z, 16, 16);
                                Rectangle Rectángulo_Chunk = new Rectangle(Índice_Bloque_Chunk_X, Índice_Bloque_Chunk_Z, Zoom_16, Zoom_16);
                                //if (Rectángulo_Chunk.IntersectsWith(Rectángulo_Pantalla))
                                {
                                    Lista_Posiciones.Add(new Point(Índice_Chunk_X, Índice_Chunk_Z));
                                }
                            }
                        }
                        Lista_Posiciones_Chunks.Add(Lista_Posiciones);
                    }
                }*/
                if (Variable_Aleatorizar_Orden_Dibujo)
                {
                    for (int Índice_Lista = 0; Índice_Lista < Lista_Posiciones_Chunks.Count; Índice_Lista++)
                    {
                        List<Point> Lista_Chunks_Temporal = Lista_Posiciones_Chunks[Índice_Lista].GetRange(0, Lista_Posiciones_Chunks[Índice_Lista].Count);
                        List<Point> Lista_Pintar_Temporal = Lista_Posiciones_Pintar[Índice_Lista].GetRange(0, Lista_Posiciones_Pintar[Índice_Lista].Count);
                        Lista_Posiciones_Chunks[Índice_Lista].Clear();
                        Lista_Posiciones_Pintar[Índice_Lista].Clear();
                        for (int Índice = Lista_Chunks_Temporal.Count - 1; Índice >= 0; Índice--)
                        {
                            if (Pendiente_Subproceso_Abortar) return;
                            int Índice_Aleatorio = Program.Rand.Next(0, Lista_Chunks_Temporal.Count);
                            Lista_Posiciones_Chunks[Índice_Lista].Add(Lista_Chunks_Temporal[Índice_Aleatorio]);
                            Lista_Posiciones_Pintar[Índice_Lista].Add(Lista_Pintar_Temporal[Índice_Aleatorio]);
                            Lista_Chunks_Temporal.RemoveAt(Índice_Aleatorio);
                            Lista_Pintar_Temporal.RemoveAt(Índice_Aleatorio);
                        }
                        Lista_Chunks_Temporal = null;
                        Lista_Pintar_Temporal = null;
                    }
                    List<Point> Lista_Posiciones_Regiones_Temporal = Lista_Posiciones_Regiones.GetRange(0, Lista_Posiciones_Regiones.Count);
                    List<List<Point>> Lista_Posiciones_Chunks_Temporal = Lista_Posiciones_Chunks.GetRange(0, Lista_Posiciones_Chunks.Count);
                    List<List<Point>> Lista_Posiciones_Pintar_Temporal = Lista_Posiciones_Pintar.GetRange(0, Lista_Posiciones_Pintar.Count);
                    Lista_Posiciones_Regiones.Clear();
                    Lista_Posiciones_Chunks.Clear();
                    Lista_Posiciones_Pintar.Clear();
                    //if (Lista_Posiciones_Regiones_Temporal.Count != Lista_Posiciones_Chunks_Temporal.Count) MessageBox.Show("Out of sync...");
                    for (int Índice = Lista_Posiciones_Regiones_Temporal.Count - 1; Índice >= 0; Índice--)
                    {
                        if (Pendiente_Subproceso_Abortar) return;
                        int Índice_Aleatorio = Program.Rand.Next(0, Lista_Posiciones_Regiones_Temporal.Count);
                        Lista_Posiciones_Regiones.Add(Lista_Posiciones_Regiones_Temporal[Índice_Aleatorio]);
                        Lista_Posiciones_Chunks.Add(Lista_Posiciones_Chunks_Temporal[Índice_Aleatorio]);
                        Lista_Posiciones_Pintar.Add(Lista_Posiciones_Pintar_Temporal[Índice_Aleatorio]);
                        Lista_Posiciones_Regiones_Temporal.RemoveAt(Índice_Aleatorio);
                        Lista_Posiciones_Chunks_Temporal.RemoveAt(Índice_Aleatorio);
                        Lista_Posiciones_Pintar_Temporal.RemoveAt(Índice_Aleatorio);
                    }
                    Lista_Posiciones_Regiones_Temporal = null;
                    Lista_Posiciones_Chunks_Temporal = null;
                    Lista_Posiciones_Pintar_Temporal = null;
                }
                // Una vez completada la lista de regiones, aleatorizar su orden
                // Y su lista de chunks también, ya que leerá de la RAM...
                // ¿Soportará carga de 4K de pantalla completa en RAM?

                // Para cada región, calcular que chunks se van a dibujar completamente:

                //int Desviación_X = 0;
                //int Desviación_Z = 0; // Acabar...

                // Eliminar las regiones anteriores que ahora no se vayan a dibujar o sobren:
                if (Diccionario_Dimensiones_Rutas.Count > 0)
                {
                    foreach (KeyValuePair<string, string> Entrada in Diccionario_Dimensiones_Rutas)
                    {
                        if (Diccionario_Dimensiones_Caché_Regiones[Entrada.Key].Count > 0)
                        {
                            for (int Índice_Región = Diccionario_Dimensiones_Caché_Regiones[Entrada.Key].Count - 1; Índice_Región >= 0; Índice_Región--)
                            {
                                if ((Variable_Vaciar_Caché_Dimensión_Actual && string.Compare(Entrada.Key, Variable_Temporal_Dimensión, true) == 0) || (Variable_Vaciar_Caché_Otras_Dimensiones && string.Compare(Entrada.Key, Variable_Temporal_Dimensión, true) != 0) || (Variable_Vaciar_Caché_Fuera_Pantalla && !Lista_Posiciones_Regiones.Contains(Diccionario_Dimensiones_Caché_Regiones[Entrada.Key][Índice_Región].Posición)) || Variable_Dibujar_Mundo_Completo)
                                {
                                    Diccionario_Dimensiones_Caché_Regiones[Entrada.Key].RemoveAt(Índice_Región);
                                }
                            }
                        }
                    }
                    GC.Collect();
                    GC.GetTotalMemory(true);
                }
                if (Variable_Contar_Densidades_Bloques_Niveles_Y)
                {
                    Total_Bloques = 0L;
                    Diccionario_Densidades.Clear();
                    Diccionario_Niveles_Y.Clear();
                }
                Dictionary<string, object> Dicci = new Dictionary<string, object>();
                int Chunks_Dibujados = 0;
                int Total_Chunks = Chunks_Ancho * Chunks_Alto;
                Dictionary<short, bool> Diccionario_Bloques_Minerales_Tesoros = null;
                short[,] Matriz_Aire_Cuevas_Subterráneas_Bloques_Únicos = Variable_Temporal_Mapa != Mapas.Aire_Subterráneo && Variable_Temporal_Mapa != Mapas.Cuevas_Subterráneas && Variable_Temporal_Mapa != Mapas.Bloques_Únicos_Verticales ? null : new short[Ancho_Cliente, Alto_Cliente];
                for (int Índice_Región = 0; Índice_Región < Lista_Posiciones_Regiones.Count; Índice_Región++)
                {
                    if (Pendiente_Subproceso_Abortar) return;
                    Minecraft.Regiones Región = new Minecraft.Regiones(Point.Empty);
                    if (Diccionario_Dimensiones_Caché_Regiones[Variable_Temporal_Dimensión].Count > 0)
                    {
                        foreach (Minecraft.Regiones Región_Temporal in Diccionario_Dimensiones_Caché_Regiones[Variable_Temporal_Dimensión])
                        {
                            if (Región_Temporal.Posición == Lista_Posiciones_Regiones[Índice_Región] && Región_Temporal.Iniciada)
                            {
                                Región = Región_Temporal;
                                break;
                            }
                        }
                    }
                    if (!Región.Iniciada)
                    {
                        this.Invoke(new Invocación.Delegado_Control_Text(Invocación.Ejecutar_Delegado_Control_Text), new object[] { this, Texto_Título + " - [Loading the region " + Program.Traducir_Número(Índice_Región + 1) + " of " + Program.Traducir_Número(Lista_Posiciones_Regiones.Count) + ", please wait...]" });
                        Región = Minecraft.Cargar_Región(Diccionario_Dimensiones_Rutas[Variable_Temporal_Dimensión], Lista_Posiciones_Regiones[Índice_Región], Habilitar_Cargar_IDs, Habilitar_Cargar_Luz_Bloques, Habilitar_Cargar_Luz_Cielo, Habilitar_Cargar_Biomas, Habilitar_Cargar_Mapa_Altura);
                        if (Región.Iniciada && !Variable_Dibujar_Mundo_Completo) Diccionario_Dimensiones_Caché_Regiones[Variable_Temporal_Dimensión].Add(Región);
                        if (Variable_Dibujar_Mundo_Completo)
                        {
                            GC.Collect();
                            GC.GetTotalMemory(true);
                        }
                    }
                    if (Pendiente_Subproceso_Abortar) return;
                    if (Región.Iniciada && Región.Matriz_Chunks != null && Región.Matriz_Chunks.Length > 0)
                    {
                        if (string.IsNullOrEmpty(Información_Nivel.VersionName)) Información_Nivel.VersionName = !Región.Minecraft_1_13 ? "1.12.2-" : "1.13+";
                        Barra_Estado.Invoke(new Invocación.Delegado_ToolStripLabel_Text(Invocación.Ejecutar_Delegado_ToolStripLabel_Text), new object[] { Barra_Estado_Etiqueta_Versión_Minecraft, "Minecraft: " + Información_Nivel.VersionName });
                        if (Variable_Temporal_Mapa == Mapas.Minerales)
                        {
                            if (Diccionario_Bloques_Minerales_Tesoros == null)
                            {
                                Diccionario_Bloques_Minerales_Tesoros = new Dictionary<short, bool>();
                                foreach (KeyValuePair<short, Color> Entrada in Minecraft.Diccionario_Bloques_Minerales)
                                {
                                    if (Pendiente_Subproceso_Abortar) return;
                                    Diccionario_Bloques_Minerales_Tesoros.Add(Entrada.Key, false);
                                }
                            }
                        }
                        /*else if (Variable_Temporal_Mapa == Mapas.Estructuras_Ocultas)
                        {
                            if (Diccionario_Bloques_Minerales_Tesoros == null)
                            {
                                Diccionario_Bloques_Minerales_Tesoros = new Dictionary<short, bool>();
                                foreach (KeyValuePair<short, Color> Entrada in Minecraft.Diccionario_Bloques_Tesoros)
                                {
                                    if (Pendiente_Subproceso_Abortar) return;
                                    Diccionario_Bloques_Minerales_Tesoros.Add(Entrada.Key, false);
                                }
                            }
                        }*/
                        //int Chunk_Z_Temporal = -1;
                        //Rectangle Rectángulo_32_Chunks = new Rectangle(0, 0, Zoom_16 * 32, Zoom_16);
                        if (Variable_Contar_Densidades_Bloques_Niveles_Y)
                        {
                            this.Invoke(new Invocación.Delegado_Control_Text(Invocación.Ejecutar_Delegado_Control_Text), new object[] { this, Texto_Título + " - [Counting the densities and Y levels, please wait...]" });
                            for (int Índice_Chunk_Z = 0; Índice_Chunk_Z < 32; Índice_Chunk_Z++)
                            {
                                for (int Índice_Chunk_X = 0; Índice_Chunk_X < 32; Índice_Chunk_X++)
                                {
                                    if (Región.Matriz_Chunks[Índice_Chunk_X, Índice_Chunk_Z].Matriz_Bytes_IDs != null)
                                    {
                                        Total_Bloques += 65536L; // Add the whole chunk (16 * 16 * 256).
                                        for (int Índice_Bloque_Z = 0; Índice_Bloque_Z < 16; Índice_Bloque_Z++)
                                        {
                                            for (int Índice_Bloque_X = 0; Índice_Bloque_X < 16; Índice_Bloque_X++)
                                            {
                                                for (int Índice_Bloque_Y = Variable_Y; Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Variable_Y); Índice_Bloque_Y--)
                                                {
                                                    short ID = Región.Matriz_Chunks[Índice_Chunk_X, Índice_Chunk_Z].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                    if (!Diccionario_Densidades.ContainsKey(ID)) Diccionario_Densidades.Add(ID, 1L);
                                                    else Diccionario_Densidades[ID]++;
                                                    if (!Diccionario_Niveles_Y.ContainsKey(ID)) Diccionario_Niveles_Y.Add(ID, new List<long>(new long[256]));
                                                    Diccionario_Niveles_Y[ID][Índice_Bloque_Y]++;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        this.Invoke(new Invocación.Delegado_Control_Text(Invocación.Ejecutar_Delegado_Control_Text), new object[] { this, Texto_Título + " - [Drawing the chunks, please wait...]" });
                        //foreach (Point Posición in Lista_Posiciones_Chunks[Índice_Región])
                        for (int Índice_Chunk = 0; Índice_Chunk < Lista_Posiciones_Chunks[Índice_Región].Count; Índice_Chunk++)
                        {
                            if (Pendiente_Subproceso_Abortar) return;
                            Point Posición = Lista_Posiciones_Chunks[Índice_Región][Índice_Chunk];
                            Point Posición_Dibujar = Lista_Posiciones_Pintar[Índice_Región][Índice_Chunk];
                            Rectángulo.Location = Posición_Dibujar;
                            if (Variable_Dibujar_Estructuras) // Draw any possible structure found.
                            {
                                if (Región.Matriz_Chunks[Posición.X, Posición.Y].Lista_Estructuras_Posiciones != null && Región.Matriz_Chunks[Posición.X, Posición.Y].Lista_Estructuras != null && Región.Matriz_Chunks[Posición.X, Posición.Y].Lista_Estructuras_Posiciones.Count > 0 && Región.Matriz_Chunks[Posición.X, Posición.Y].Lista_Estructuras_Posiciones.Count == Región.Matriz_Chunks[Posición.X, Posición.Y].Lista_Estructuras.Count)
                                {
                                    for (int Índice_Estructura = 0; Índice_Estructura < Región.Matriz_Chunks[Posición.X, Posición.Y].Lista_Estructuras_Posiciones.Count; Índice_Estructura++)
                                    {
                                        Pintar_Superior.DrawImage(Minecraft.Obtener_Imagen_Estructura(Región.Matriz_Chunks[Posición.X, Posición.Y].Lista_Estructuras[Índice_Estructura]), new Rectangle((Posición_Dibujar.X + (Región.Matriz_Chunks[Posición.X, Posición.Y].Lista_Estructuras_Posiciones[Índice_Estructura].X * Zoom)) - 10, (Posición_Dibujar.Y + (Región.Matriz_Chunks[Posición.X, Posición.Y].Lista_Estructuras_Posiciones[Índice_Estructura].Z * Zoom)) - 22, 20, 24), new Rectangle(0, 0, 20, 24), GraphicsUnit.Pixel);
                                    }
                                }
                                if (Región.Posición.X == 0 &&
                                    Región.Posición.Y == 0 &&
                                    Posición.X == 0 &&
                                    Posición.Y == 0) // Draw the center of the world.
                                {
                                    Pintar_Superior.DrawImage(Resources.Estructura_Centro_Mundo, new Rectangle((Posición_Dibujar.X + (((int)Información_Nivel.SpawnX % 16) * Zoom)) - 10, (Posición_Dibujar.Y + (((int)Información_Nivel.SpawnZ % 16) * Zoom)) - 22, 20, 24), new Rectangle(0, 0, 20, 24), GraphicsUnit.Pixel);
                                }
                                if (Diccionario_Posiciones_Jugadores != null && Diccionario_Posiciones_Jugadores.Count > 0)
                                {
                                    foreach (KeyValuePair<string, Minecraft.Posiciones_Jugadores> Entrada in Diccionario_Posiciones_Jugadores)
                                    {
                                        if (Región.Posición.X == Entrada.Value.Región_X && // Same region.
                                            Región.Posición.Y == Entrada.Value.Región_Z &&
                                            Posición.X == Entrada.Value.Chunk_X && // Same chunk.
                                            Posición.Y == Entrada.Value.Chunk_Z) // Draw the players as an extra.
                                        {
                                            Pintar_Superior.DrawImage(Program.Rand.Next(0, 2) == 0 ? Resources.Estructura_Steve : Resources.Estructura_Alex, new Rectangle((Posición_Dibujar.X + (((int)Entrada.Value.X % 16) * Zoom)) - 10, (Posición_Dibujar.Y + (((int)Entrada.Value.Z % 16) * Zoom)) - 22, 20, 24), new Rectangle(0, 0, 20, 24), GraphicsUnit.Pixel);
                                        }
                                    }
                                }
                                if (Región.Posición.X == Información_Nivel.Spawn_Región_X && // Same region.
                                    Región.Posición.Y == Información_Nivel.Spawn_Región_Z &&
                                    Posición.X == Información_Nivel.Spawn_Chunk_X && // Same chunk.
                                    Posición.Y == Información_Nivel.Spawn_Chunk_Z) // Draw the spawn as an extra.
                                {
                                    Pintar_Superior.DrawImage(Resources.Estructura_Spawn, new Rectangle((Posición_Dibujar.X + (((int)Información_Nivel.SpawnX % 16) * Zoom)) - 10, (Posición_Dibujar.Y + (((int)Información_Nivel.SpawnZ % 16) * Zoom)) - 22, 20, 24), new Rectangle(0, 0, 20, 24), GraphicsUnit.Pixel);
                                }
                            }
                            //Pintar_Superior.FillRectangle(new SolidBrush(Program.Obtener_Color_Puro_1530(Program.Rand.Next(0, 1530))), Posición_Dibujar.X, Posición_Dibujar.Y, Zoom, Zoom); // Chunk tests.
                            //if (Posición.X < 0 || Posición.Y < 0 || Posición.X > 31 || Posición.Y > 31) MessageBox.Show(Posición.ToString());
                            /*if (Chunk_Z_Temporal < 0)
                            {
                                Chunk_Z_Temporal = Posición.Y;
                                //Rectángulo_32_Chunks.Location = new Point(Región.Posición.X, Región.Posición.Y + (Chunk_Z_Temporal * Zoom_16));
                                //Picture.Invalidate(Rectángulo_32_Chunks);
                                //Picture.Update();
                            }
                            else if (Posición.Y != Chunk_Z_Temporal)
                            {
                                Chunk_Z_Temporal = Posición.Y;
                                Rectángulo_32_Chunks.Location = new Point(Región.Posición.X - X_Origen, (Región.Posición.Y + (Chunk_Z_Temporal * Zoom_16)) - Z_Origen);
                                //MessageBox.Show(Rectángulo_32_Chunks.ToString());
                                Picture.Invalidate(Rectángulo_32_Chunks);
                                Picture.Update();
                            }*/
                            if (Variable_Temporal_Mapa != Mapas.Light_populated && Variable_Temporal_Mapa != Mapas.Terrain_populated && Variable_Temporal_Mapa != Mapas.Status)
                            {
                                if (Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs != null/* || Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Biomas != null*/)
                                {
                                    /*Rectángulo.Location = new Point(Región.Posición.X + (Posición.X * Zoom_16), Región.Posición.Y + (Posición.Y * Zoom_16));
                                    Rectángulo.X -= Origen_X;
                                    Rectángulo.Y -= Origen_Z;*/
                                    for (int Índice_Bloque_Z = 0; Índice_Bloque_Z < 16; Índice_Bloque_Z++, Rectángulo.Y += Zoom)
                                    {
                                        Rectángulo.X = Posición_Dibujar.X;
                                        for (int Índice_Bloque_X = 0; Índice_Bloque_X < 16; Índice_Bloque_X++, Rectángulo.X += Zoom)
                                        {
                                            if (Pendiente_Subproceso_Abortar) return;
                                            //Rectángulo.Location = Point.Empty;
                                            if (Variable_Temporal_Mapa == Mapas.Minerales) // Reiniciar
                                            {
                                                foreach (KeyValuePair<short, Color> Entrada in Minecraft.Diccionario_Bloques_Minerales)
                                                {
                                                    if (Pendiente_Subproceso_Abortar) return;
                                                    Diccionario_Bloques_Minerales_Tesoros[Entrada.Key] = false;
                                                }
                                            }
                                            /*else if (Variable_Temporal_Mapa == Mapas.Estructuras_Ocultas) // Reiniciar
                                            {
                                                foreach (KeyValuePair<short, Color> Entrada in Minecraft.Diccionario_Bloques_Tesoros)
                                                {
                                                    if (Pendiente_Subproceso_Abortar) return;
                                                    Diccionario_Bloques_Minerales_Tesoros[Entrada.Key] = false;
                                                }
                                            }*/
                                            if (Variable_Temporal_Mapa != Mapas.Biomas && Variable_Temporal_Mapa != Mapas.Heightmap_Ocean_Floor && Variable_Temporal_Mapa != Mapas.Heightmap_Motion_Blocking_No_Leaves && Variable_Temporal_Mapa != Mapas.Heightmap_Motion_Blocking && Variable_Temporal_Mapa != Mapas.Heightmap_Light_Blocking)
                                            {
                                                bool Bloques_Superfice = false;
                                                int Superficie_Y_Origen = 0;
                                                //int Superficie_Data_Origen = 0;
                                                int Superficie_Y = 0;
                                                int Superficie_ID = 0;
                                                //int Superficie_Data = 0;

                                                short Superficie_ID_Origen = 0;

                                                /*bool Bloques_Superfice_Sólida = false;
                                                int Superficie_Y_Sólida = 0;
                                                int Superficie_ID_Sólida = 0;
                                                int Superficie_Data_Sólida = 0;*/

                                                Superficie_ID = Minecraft.Índice_Aire;
                                                Superficie_ID_Origen = Minecraft.Índice_Aire;
                                                Color Color_ARGB = Color.Gray;
                                                if (Variable_Temporal_Mapa == Mapas.Superficie || Variable_Temporal_Mapa == Mapas.Superficie_Seca)
                                                {
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)/*Y > -1 || Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Mapa_Altura == null ? Y : Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Mapa_Altura[Índice_Chunk_X, Índice_Chunk_Z]*/; Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                        if (ID != Minecraft.Índice_Aire && ID != Minecraft.Índice_Aire_Cueva && ID != Minecraft.Índice_Aire_Vacío)
                                                        {
                                                            if (!Bloques_Superfice)
                                                            {
                                                                if (Superficie_Y_Origen <= 0 && (Variable_Temporal_Mapa != Mapas.Superficie_Seca || !Minecraft.Diccionario_Bloques_Transparentes.ContainsKey(ID)))
                                                                {
                                                                    Superficie_Y_Origen = Índice_Bloque_Y;
                                                                    Superficie_ID_Origen = ID;
                                                                }
                                                                if (!Minecraft.Diccionario_Bloques_Transparentes.ContainsKey(ID)) // Ignore: Water, Lava, Fire, Snow layer, Ice, and Frosted ice
                                                                {
                                                                    Bloques_Superfice = true;
                                                                    Superficie_Y = Índice_Bloque_Y;
                                                                    Superficie_ID = ID;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                if (Variable_Temporal_Mapa == Mapas.Superficie_Muerta)
                                                {
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                        if (!Minecraft.Bloques.Diccionario_Índice_Vida_Vegetal.ContainsKey(ID))
                                                        {
                                                            using (SolidBrush Pincel = new SolidBrush(Program.Obtener_Color_3D(Minecraft.Diccionario_Bloques_Índices_Colores[ID], Índice_Bloque_Y, Variable_Temporal_Mapa_3D))) Pintar.FillRectangle(Pincel, Rectángulo);
                                                            break;
                                                        }
                                                    }
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Superficie_Realista)
                                                {
                                                    List<short> Lista_IDs_Dibujar = new List<short>(); // Incluir los bloques transparentes de encima
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                        if (!Minecraft.Diccionario_Bloques_Aire.ContainsKey(ID))
                                                        {
                                                            if (!Minecraft.Diccionario_Texturas_Transparentes.ContainsKey(ID)) // Bloque sólido
                                                            {
                                                                Lista_IDs_Dibujar.Add(ID);
                                                                break;
                                                            }
                                                            else if (Lista_IDs_Dibujar.Count <= 0 || Lista_IDs_Dibujar[Lista_IDs_Dibujar.Count - 1] != ID) Lista_IDs_Dibujar.Add(ID); // No repetir bloques transparentes
                                                        }
                                                    }
                                                    if (Lista_IDs_Dibujar.Count > 0)
                                                    {
                                                        Lista_IDs_Dibujar.Reverse();
                                                        Pintar.CompositingMode = CompositingMode.SourceOver;
                                                        foreach (short ID in Lista_IDs_Dibujar)
                                                        {
                                                            if (Pendiente_Subproceso_Abortar) return;
                                                            if (Minecraft.Diccionario_Texturas[ID] != null)
                                                            {
                                                                Pintar.DrawImage(Minecraft.Diccionario_Texturas[ID], Rectángulo, new Rectangle(0, 0, 16, 16), GraphicsUnit.Pixel);
                                                                //Pintar.DrawImage(Imagen_Textura, new Rectangle(Rectángulo.X, Rectángulo.Y, 16, 16), new Rectangle(0, 0, 16, 16), GraphicsUnit.Pixel);
                                                                //Picture.Refresh();
                                                            }
                                                            //else MessageBox.Show(Minecraft.Diccionario_Bloques_Índices_Nombres[ID], "null");
                                                        }
                                                        Pintar.CompositingMode = CompositingMode.SourceCopy;
                                                    }
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Bloques_Flotantes)
                                                {
                                                    // Detects blocks that will fall or be destroyed when updated.
                                                    if (Y > 0)
                                                    {
                                                        int Bloques_Flotantes = 0;
                                                        for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= 1; Índice_Bloque_Y--)
                                                        {
                                                            if (Pendiente_Subproceso_Abortar) return;
                                                            if (Diccionario_Bloques_Flotantes.ContainsKey(Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z]) &&
                                                                Diccionario_Bloques_Aire.ContainsKey(Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y - 1, Índice_Bloque_Z]))
                                                            {
                                                                Bloques_Flotantes++;
                                                            }
                                                        }
                                                        Pintar.FillRectangle(Bloques_Flotantes <= 0 ? Brushes.Black : Brushes.White, Rectángulo);
                                                    }
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Nether_top_bedrock)
                                                {
                                                    int Grosor_Lecho_Roca = 0;
                                                    int Índice_Lecho_Roca = Minecraft.Bloques.Diccionario_Nombre_Índice["minecraft:bedrock"];
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)/*Y > -1 || Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Mapa_Altura == null ? Y : Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Mapa_Altura[Índice_Chunk_X, Índice_Chunk_Z]*/; Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        if (Índice_Bloque_Y <= 64 && Índice_Bloque_Y <= 191 && Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z] == Índice_Lecho_Roca)
                                                        {
                                                            Grosor_Lecho_Roca++;
                                                        }
                                                    }
                                                    if (Grosor_Lecho_Roca == 1) // The ideal 1 block thickness to use ender pearls and get on top.
                                                    {
                                                        using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(255, 0, 255, 0))) Pintar.FillRectangle(Pincel, Rectángulo);
                                                    }
                                                    else if (Grosor_Lecho_Roca == 2)
                                                    {
                                                        using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(255, 160, 160, 160))) Pintar.FillRectangle(Pincel, Rectángulo);
                                                    }
                                                    else if (Grosor_Lecho_Roca == 3)
                                                    {
                                                        using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(255, 128, 128, 128))) Pintar.FillRectangle(Pincel, Rectángulo);
                                                    }
                                                    else if (Grosor_Lecho_Roca == 4)
                                                    {
                                                        using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(255, 96, 96, 96))) Pintar.FillRectangle(Pincel, Rectángulo);
                                                    }
                                                    else if (Grosor_Lecho_Roca == 5)
                                                    {
                                                        using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(255, 64, 64, 64))) Pintar.FillRectangle(Pincel, Rectángulo);
                                                    }
                                                    else
                                                    {
                                                        using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(255, 32, 32, 32))) Pintar.FillRectangle(Pincel, Rectángulo);
                                                    }
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Mapa_Altura)
                                                {
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)/*Y > -1 || Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Mapa_Altura == null ? Y : Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Mapa_Altura[Índice_Chunk_X, Índice_Chunk_Z]*/; Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        if (!Minecraft.Diccionario_Bloques_Aire.ContainsKey(Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z]))
                                                        {
                                                            Pintar.FillRectangle(Variable_Temporal_Mapa_3D ? Program.Matriz_Pinceles_Termografía_256[Índice_Bloque_Y] : Program.Matriz_Pinceles_Grises_256[Índice_Bloque_Y], Rectángulo);
                                                            break;
                                                        }
                                                    }
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Aire_Subterráneo)
                                                {
                                                    bool No_Aire_Encontrado = false;
                                                    short Aire_Subterráneo = 0;
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                        if (!No_Aire_Encontrado) // Buscar un bloque que no sea aire ni hojas de un árbol
                                                        {
                                                            if (!Minecraft.Diccionario_Bloques_Aire_Hojas.ContainsKey(ID))
                                                            {
                                                                No_Aire_Encontrado = true;
                                                            }
                                                        }
                                                        else // Buscar un bloque que sea aire y esté por debajo del superior
                                                        {
                                                            if (Minecraft.Diccionario_Bloques_Aire.ContainsKey(ID))
                                                            {
                                                                Aire_Subterráneo++;
                                                            }
                                                        }
                                                    }
                                                    if (Aire_Subterráneo > 0 && Rectángulo.X >= 0 && Rectángulo.Y >= 0 && Rectángulo.X < Ancho_Cliente && Rectángulo.Y < Alto_Cliente)
                                                    {
                                                        Matriz_Aire_Cuevas_Subterráneas_Bloques_Únicos[Rectángulo.X, Rectángulo.Y] = Aire_Subterráneo;
                                                    }
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Cuevas_Subterráneas)
                                                {
                                                    bool Aire_Encontrado = true;
                                                    short Cuevas_Subterráneas = 0;
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                        //if (Aire_Encontrado) // Buscar un bloque que no sea aire ni hojas de un árbol
                                                        {
                                                            if (!Minecraft.Diccionario_Bloques_Aire_Hojas.ContainsKey(ID))
                                                            {
                                                                if (Aire_Encontrado)
                                                                {
                                                                    Cuevas_Subterráneas++;
                                                                    Aire_Encontrado = false;
                                                                }
                                                                //else Aire_Encontrado = false;
                                                            }
                                                            else Aire_Encontrado = true;
                                                        }
                                                        /*else // Buscar un bloque que sea aire y esté por debajo del superior
                                                        {
                                                            if (Minecraft.Diccionario_Bloques_Aire.ContainsKey(ID))
                                                            {
                                                                //Aire_Subterráneo++;
                                                            }
                                                        }*/
                                                    }
                                                    if (Cuevas_Subterráneas > 0 && Rectángulo.X >= 0 && Rectángulo.Y >= 0 && Rectángulo.X < Ancho_Cliente && Rectángulo.Y < Alto_Cliente)
                                                    {
                                                        Matriz_Aire_Cuevas_Subterráneas_Bloques_Únicos[Rectángulo.X, Rectángulo.Y] = Cuevas_Subterráneas;
                                                    }
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Líquidos_Subterráneos)
                                                {
                                                    bool Bloque_Agua = false;
                                                    bool Bloque_Lava = false;
                                                    bool Bloque_Sólido = false;
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                        if (!Bloque_Sólido)
                                                        {
                                                            if (!Minecraft.Diccionario_Bloques_Transparentes.ContainsKey(ID) && !Minecraft.Diccionario_Bloques_Altura_Diferente.ContainsKey(ID))
                                                            {
                                                                Bloque_Sólido = true;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (Minecraft.Bloques.Diccionario_Índice_Agua.ContainsKey(ID)) Bloque_Agua = true;
                                                            if (Minecraft.Bloques.Diccionario_Índice_Lava.ContainsKey(ID)) Bloque_Lava = true;
                                                        }
                                                    }
                                                    if (Bloque_Agua && !Bloque_Lava)
                                                    {
                                                        Pintar.FillRectangle(Brushes.Blue, Rectángulo);
                                                    }
                                                    else if (!Bloque_Agua && Bloque_Lava)
                                                    {
                                                        using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(255, 255, 160, 0))) Pintar.FillRectangle(Pincel, Rectángulo);
                                                    }
                                                    else if (Bloque_Agua && Bloque_Lava)
                                                    {
                                                        Pintar.FillRectangle(Brushes.White, Rectángulo);
                                                        //using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(255, 255, 160, 255))) Pintar.FillRectangle(Pincel, Rectángulo);
                                                    }
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Bloques_Únicos_Verticales)
                                                {
                                                    Dictionary<short, object> Diccionario_IDs = new Dictionary<short, object>();
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                        if (!Diccionario_IDs.ContainsKey(ID)) Diccionario_IDs.Add(ID, null);
                                                    }
                                                    //Pintar.FillRectangle(Variable_Temporal_Mapa_3D ? Program.Matriz_Pinceles_Arco_Iris_256[Diccionario_IDs.Count - 1] : Program.Matriz_Pinceles_Grises_256[Diccionario_IDs.Count - 1], Rectángulo);
                                                    if (Diccionario_IDs.Count > 0 && Rectángulo.X >= 0 && Rectángulo.Y >= 0 && Rectángulo.X < Ancho_Cliente && Rectángulo.Y < Alto_Cliente)
                                                    {
                                                        Matriz_Aire_Cuevas_Subterráneas_Bloques_Únicos[Rectángulo.X, Rectángulo.Y] = (short)Diccionario_IDs.Count;
                                                    }
                                                    Diccionario_IDs.Clear();
                                                    Diccionario_IDs = null;
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Bloques_Peces_Plateados)
                                                {
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                        if (Minecraft.Bloques.Diccionario_Índice_Peces_Plateados.ContainsKey(ID))
                                                        {
                                                            using (SolidBrush Pincel = new SolidBrush(Program.Obtener_Color_3D(Minecraft.Diccionario_Bloques_Índices_Colores[ID], Índice_Bloque_Y, Variable_Temporal_Mapa_3D))) Pintar.FillRectangle(Pincel, Rectángulo);
                                                            break;
                                                        }
                                                    }
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Componentes_Piedra_Rojiza)
                                                {
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                        if (Minecraft.Bloques.Diccionario_Índice_Piedra_Rojiza.ContainsKey(ID))
                                                        {
                                                            using (SolidBrush Pincel = new SolidBrush(Program.Obtener_Color_3D(Minecraft.Diccionario_Bloques_Índices_Colores[ID], Índice_Bloque_Y, Variable_Temporal_Mapa_3D))) Pintar.FillRectangle(Pincel, Rectángulo);
                                                            break;
                                                        }
                                                    }
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Minerales)
                                                {
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                        if (Diccionario_Bloques_Minerales_Tesoros.ContainsKey(ID))
                                                        {
                                                            Diccionario_Bloques_Minerales_Tesoros[ID] = true;
                                                        }
                                                    }
                                                    //Pintar.FillRectangle(Brushes.Yellow, Rectángulo); // Por si no hay tesoros
                                                    foreach (KeyValuePair<short, bool> Entrada in Diccionario_Bloques_Minerales_Tesoros)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        if (Entrada.Value)
                                                        {
                                                            using (SolidBrush Pincel = new SolidBrush(Minecraft.Diccionario_Bloques_Minerales[Entrada.Key])) Pintar.FillRectangle(Pincel, Rectángulo);
                                                            break;
                                                        }
                                                    }
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Estructuras_Ocultas)
                                                {
                                                    for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                        if (Minecraft.Bloques.Diccionario_Índice_Estructuras_Ocultas.ContainsKey(ID))
                                                        {
                                                            using (SolidBrush Pincel = new SolidBrush(Program.Obtener_Color_3D(Minecraft.Diccionario_Bloques_Índices_Colores[ID], Índice_Bloque_Y, Variable_Temporal_Mapa_3D))) Pintar.FillRectangle(Pincel, Rectángulo);
                                                            break;
                                                        }
                                                    }
                                                    /*for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                        if (Diccionario_Bloques_Minerales_Tesoros.ContainsKey(ID))
                                                        {
                                                            Diccionario_Bloques_Minerales_Tesoros[ID] = true;
                                                        }
                                                    }
                                                    //Pintar.FillRectangle(Brushes.Yellow, Rectángulo); // Por si no hay tesoros
                                                    foreach (KeyValuePair<short, bool> Entrada in Diccionario_Bloques_Minerales_Tesoros)
                                                    {
                                                        if (Pendiente_Subproceso_Abortar) return;
                                                        if (Entrada.Value)
                                                        {
                                                            using (SolidBrush Pincel = new SolidBrush(Minecraft.Diccionario_Bloques_Tesoros[Entrada.Key])) Pintar.FillRectangle(Pincel, Rectángulo);
                                                            break;
                                                        }
                                                    }*/
                                                }
                                                else if (Variable_Temporal_Mapa == Mapas.Buscar_Bloque)
                                                {
                                                    if (Variable_Temporal_Bloque_ID > -1) // Only search for the selected block
                                                    {
                                                        for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                        {
                                                            if (Pendiente_Subproceso_Abortar) return;
                                                            short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                            if (ID == Variable_Temporal_Bloque_ID)
                                                            {
                                                                Color_ARGB = Program.Obtener_Color_3D(Minecraft.Diccionario_Bloques_Índices_Colores[ID], Índice_Bloque_Y, Variable_Temporal_Mapa_3D);
                                                                SolidBrush Pincel = new SolidBrush(Color_ARGB);
                                                                Pintar.FillRectangle(Pincel, Rectángulo);
                                                                Pincel.Dispose();
                                                                Pincel = null;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    else // Search for the first block that contains the selected name
                                                    {
                                                        for (int Índice_Bloque_Y = Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo); Índice_Bloque_Y >= (!Variable_Cortar_Y ? 0 : Math.Min(Y, Región.Matriz_Chunks[Posición.X, Posición.Y].Y_Máximo)); Índice_Bloque_Y--)
                                                        {
                                                            if (Pendiente_Subproceso_Abortar) return;
                                                            short ID = Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_IDs[Índice_Bloque_X, Índice_Bloque_Y, Índice_Bloque_Z];
                                                            string Nombre = Minecraft.Diccionario_Bloques_Índices_Nombres[ID];
                                                            if (Nombre.Contains(Variable_Temporal_Bloque))
                                                            {
                                                                Color_ARGB = Program.Obtener_Color_3D(Minecraft.Diccionario_Bloques_Índices_Colores[ID], Índice_Bloque_Y, Variable_Temporal_Mapa_3D);
                                                                SolidBrush Pincel = new SolidBrush(Color_ARGB);
                                                                Pintar.FillRectangle(Pincel, Rectángulo);
                                                                Pincel.Dispose();
                                                                Pincel = null;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }

                                                // ...

                                                if (Variable_Temporal_Mapa == Mapas.Superficie || Variable_Temporal_Mapa == Mapas.Superficie_Seca)
                                                {
                                                    //Color Color_ARGB = Color.Gray;
                                                    if (Minecraft.Diccionario_Bloques_Índices_Nombres.ContainsKey(Superficie_ID_Origen))
                                                    {
                                                        Color_ARGB = Minecraft.Diccionario_Bloques_Índices_Colores[Superficie_ID_Origen];
                                                    }
                                                    if (Color_ARGB.A != 255) Color_ARGB = Color.FromArgb(255, Color_ARGB.R, Color_ARGB.G, Color_ARGB.B);
                                                    //using (SolidBrush Pincel = new SolidBrush(Color_ARGB)) Pintar_Superficie_2D.FillRectangle(Pincel, Rectángulo);
                                                    if (!Variable_Temporal_Mapa_3D) Superficie_Y = 64;
                                                    if (Superficie_Y != 64) // 64 = Original color
                                                    {
                                                        if (Superficie_Y < 64) // From 0 to 63 = Darker color
                                                        {
                                                            int Multiplicador = ((Superficie_Y + 1) / 2) + 32;
                                                            Color_ARGB = Color.FromArgb(255, (byte)(Math.Min(256, Math.Max(1, ((Color_ARGB.R + 1) * Multiplicador) / 64)) - 1), (byte)(Math.Min(256, Math.Max(1, ((Color_ARGB.G + 1) * Multiplicador) / 64)) - 1), (byte)(Math.Min(256, Math.Max(1, ((Color_ARGB.B + 1) * Multiplicador) / 64)) - 1));
                                                        }
                                                        else // From 65 to 128 = Brighter color
                                                        {
                                                            int Divisor = (32 - ((Math.Min(128, Superficie_Y) - 65) / 2)) + 32;
                                                            Color_ARGB = Color.FromArgb(255, (byte)(Math.Min(256, Math.Max(1, ((Color_ARGB.R + 1) * 64) / Divisor)) - 1), (byte)(Math.Min(256, Math.Max(1, ((Color_ARGB.G + 1) * 64) / Divisor)) - 1), (byte)(Math.Min(256, Math.Max(1, ((Color_ARGB.B + 1) * 64) / Divisor)) - 1));
                                                        }
                                                    }
                                                    using (SolidBrush Pincel = new SolidBrush(Color_ARGB)) Pintar.FillRectangle(Pincel, Rectángulo);
                                                }
                                            }
                                            else if (Variable_Temporal_Mapa == Mapas.Biomas)
                                            {
                                                if (Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Biomas != null)
                                                {
                                                    if (Minecraft.Diccionario_Biomas_Pinceles.ContainsKey(Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Biomas[Índice_Bloque_X, Índice_Bloque_Z]))
                                                    {
                                                        Pintar.FillRectangle(Minecraft.Diccionario_Biomas_Pinceles[Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Biomas[Índice_Bloque_X, Índice_Bloque_Z]], Rectángulo);
                                                    }
                                                    //else Pintar.FillRectangle(Brushes.Yellow, Rectángulo);
                                                }
                                            }
                                            else if (Variable_Temporal_Mapa == Mapas.Heightmap_Ocean_Floor)
                                            {
                                                if (Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Ocean_Floor != null)
                                                {
                                                    if (Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Ocean_Floor[Índice_Bloque_X, Índice_Bloque_Z] < 256)
                                                    {
                                                        if (Variable_Mapa_3D) Pintar.FillRectangle(Program.Matriz_Pinceles_Arco_Iris_256[255 - Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Ocean_Floor[Índice_Bloque_X, Índice_Bloque_Z]], Rectángulo);
                                                        else Pintar.FillRectangle(Program.Matriz_Pinceles_Grises_256[Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Ocean_Floor[Índice_Bloque_X, Índice_Bloque_Z]], Rectángulo);
                                                    }
                                                    //else Pintar.FillRectangle(Brushes.White, Rectángulo);
                                                }
                                            }
                                            else if (Variable_Temporal_Mapa == Mapas.Heightmap_Motion_Blocking_No_Leaves)
                                            {
                                                if (Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Motion_Blocking_No_Leaves != null)
                                                {
                                                    if (Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Motion_Blocking_No_Leaves[Índice_Bloque_X, Índice_Bloque_Z] < 256)
                                                    {
                                                        if (Variable_Mapa_3D) Pintar.FillRectangle(Program.Matriz_Pinceles_Arco_Iris_256[255 - Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Motion_Blocking_No_Leaves[Índice_Bloque_X, Índice_Bloque_Z]], Rectángulo);
                                                        else Pintar.FillRectangle(Program.Matriz_Pinceles_Grises_256[Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Motion_Blocking_No_Leaves[Índice_Bloque_X, Índice_Bloque_Z]], Rectángulo);
                                                    }
                                                    //else Pintar.FillRectangle(Brushes.White, Rectángulo);
                                                }
                                            }
                                            else if (Variable_Temporal_Mapa == Mapas.Heightmap_Motion_Blocking)
                                            {
                                                if (Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Motion_Blocking != null)
                                                {
                                                    if (Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Motion_Blocking[Índice_Bloque_X, Índice_Bloque_Z] < 256)
                                                    {
                                                        if (Variable_Mapa_3D) Pintar.FillRectangle(Program.Matriz_Pinceles_Arco_Iris_256[255 - Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Motion_Blocking[Índice_Bloque_X, Índice_Bloque_Z]], Rectángulo);
                                                        else Pintar.FillRectangle(Program.Matriz_Pinceles_Grises_256[Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Motion_Blocking[Índice_Bloque_X, Índice_Bloque_Z]], Rectángulo);
                                                    }
                                                    //else Pintar.FillRectangle(Brushes.White, Rectángulo);
                                                }
                                            }
                                            else if (Variable_Temporal_Mapa == Mapas.Heightmap_Light_Blocking)
                                            {
                                                if (Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Light_Blocking != null)
                                                {
                                                    if (Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Light_Blocking[Índice_Bloque_X, Índice_Bloque_Z] < 256)
                                                    {
                                                        if (Variable_Mapa_3D) Pintar.FillRectangle(Program.Matriz_Pinceles_Arco_Iris_256[255 - Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Light_Blocking[Índice_Bloque_X, Índice_Bloque_Z]], Rectángulo);
                                                        else Pintar.FillRectangle(Program.Matriz_Pinceles_Grises_256[Región.Matriz_Chunks[Posición.X, Posición.Y].Matriz_Bytes_Heightmap_Light_Blocking[Índice_Bloque_X, Índice_Bloque_Z]], Rectángulo);
                                                    }
                                                    //else Pintar.FillRectangle(Brushes.White, Rectángulo);
                                                }
                                            }
                                            //else Pintar.FillRectangle(Brushes.Yellow, Rectángulo);
                                        }
                                        //Rectángulo.X -= Zoom_16;
                                    }
                                    //Rectángulo.Y -= Zoom_16;
                                    //Rectángulo.Location = new Point(Región.Posición.X + (Posición.X * Zoom_16), Región.Posición.Y + (Posición.Y * Zoom_16));
                                    //Rectángulo.X -= X_Origen;
                                    //Rectángulo.Y -= Z_Origen;
                                    //Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, new Rectangle(new Point((Región.Posición.X + (Posición.X * Zoom_16)) - Origen_X, (Región.Posición.Y + (Posición.Y * Zoom_16)) - Origen_Z), new Size(Zoom_16, Zoom_16)) });
                                    //Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, new Rectangle(Rectángulo.Location, new Size(Zoom_16, Zoom_16)) });
                                    //Picture.Invalidate(new Rectangle(Rectángulo.Location, new Size(Zoom_16, Zoom_16)));
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, new Rectangle(Posición_Dibujar, new Size(Zoom_16, Zoom_16)) });
                                    //Chunks_Dibujados++;
                                    /*if (Chunks_Dibujados % 32 == 0)
                                    {
                                        Picture.Update();
                                    }*/
                                }
                            }
                            else if (Variable_Temporal_Mapa == Mapas.Light_populated)
                            {
                                Rectangle Rectángulo_Chunk = new Rectangle(Posición_Dibujar, new Size(Zoom_16, Zoom_16));
                                if (Región.Matriz_Chunks[Posición.X, Posición.Y].LightPopulated == 0) // False
                                {
                                    Pintar.FillRectangle(Brushes.Red, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (Región.Matriz_Chunks[Posición.X, Posición.Y].LightPopulated == 1) // True
                                {
                                    Pintar.FillRectangle(Brushes.Lime, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (Región.Matriz_Chunks[Posición.X, Posición.Y].LightPopulated <= 255) // Undefined
                                {
                                    Pintar.FillRectangle(Brushes.Blue, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else // Not present (unknown state)
                                {
                                    Pintar.FillRectangle(Brushes.Yellow, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                            }
                            else if (Variable_Temporal_Mapa == Mapas.Terrain_populated)
                            {
                                Rectangle Rectángulo_Chunk = new Rectangle(Posición_Dibujar, new Size(Zoom_16, Zoom_16));
                                if (Región.Matriz_Chunks[Posición.X, Posición.Y].TerrainPopulated == 0) // False
                                {
                                    Pintar.FillRectangle(Brushes.Red, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (Región.Matriz_Chunks[Posición.X, Posición.Y].TerrainPopulated == 1) // True
                                {
                                    Pintar.FillRectangle(Brushes.Lime, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (Región.Matriz_Chunks[Posición.X, Posición.Y].TerrainPopulated <= 255) // Undefined
                                {
                                    Pintar.FillRectangle(Brushes.Blue, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else // Not present (unknown state)
                                {
                                    Pintar.FillRectangle(Brushes.Yellow, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                            }
                            else if (Variable_Temporal_Mapa == Mapas.Status)
                            {
                                Rectangle Rectángulo_Chunk = new Rectangle(Posición_Dibujar, new Size(Zoom_16, Zoom_16));
                                if (string.Compare(Región.Matriz_Chunks[Posición.X, Posición.Y].Status, "postprocessed", true) == 0)
                                {
                                    using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(255, 255, 255))) Pintar.FillRectangle(Pincel, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (string.Compare(Región.Matriz_Chunks[Posición.X, Posición.Y].Status, "fullchunk", true) == 0)
                                {
                                    using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(0, 255, 0))) Pintar.FillRectangle(Pincel, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (string.Compare(Región.Matriz_Chunks[Posición.X, Posición.Y].Status, "decorated", true) == 0)
                                {
                                    using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(0, 160, 0))) Pintar.FillRectangle(Pincel, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (string.Compare(Región.Matriz_Chunks[Posición.X, Posición.Y].Status, "liquid_carved", true) == 0)
                                {
                                    using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(0, 0, 160))) Pintar.FillRectangle(Pincel, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (string.Compare(Región.Matriz_Chunks[Posición.X, Posición.Y].Status, "carved", true) == 0)
                                {
                                    using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(255, 0, 0))) Pintar.FillRectangle(Pincel, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (string.Compare(Región.Matriz_Chunks[Posición.X, Posición.Y].Status, "empty", true) == 0)
                                {
                                    using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(255, 255, 0))) Pintar.FillRectangle(Pincel, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (string.Compare(Región.Matriz_Chunks[Posición.X, Posición.Y].Status, "mobs_spawned", true) == 0)
                                {
                                    using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(160, 160, 160))) Pintar.FillRectangle(Pincel, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (string.IsNullOrEmpty(Región.Matriz_Chunks[Posición.X, Posición.Y].Status))
                                {
                                    using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(0, 0, 0))) Pintar.FillRectangle(Pincel, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (!Dicci.ContainsKey(Región.Matriz_Chunks[Posición.X, Posición.Y].Status))
                                {
                                    Dicci.Add(Región.Matriz_Chunks[Posición.X, Posición.Y].Status, null);
                                    if (string.Compare(Environment.UserName, "Jupisoft", true) == 0) MessageBox.Show(this, Región.Matriz_Chunks[Posición.X, Posición.Y].Status);
                                    using (SolidBrush Pincel = new SolidBrush(Color.FromArgb(160, 160, 0))) Pintar.FillRectangle(Pincel, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                /*else if (string.Compare(Región.Matriz_Chunks[Posición.X, Posición.Y].Status, "postprocessed", true) == 0)
                                {
                                    Pintar.FillRectangle(Brushes.Lime, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (string.Compare(Región.Matriz_Chunks[Posición.X, Posición.Y].Status, "", true) == 0)
                                {
                                    Pintar.FillRectangle(Brushes.Blue, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }
                                else if (string.Compare(Región.Matriz_Chunks[Posición.X, Posición.Y].Status, "", true) == 0)
                                {
                                    Pintar.FillRectangle(Brushes.Yellow, Rectángulo_Chunk);
                                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                                }*/
                            }
                            //else Pintar.FillRectangle(Brushes.Yellow, Rectángulo.X, Rectángulo.Y, 16, 16);
                            if (Variable_Temporal_Mapa != Mapas.Aire_Subterráneo && Variable_Temporal_Mapa != Mapas.Cuevas_Subterráneas && Variable_Temporal_Mapa != Mapas.Bloques_Únicos_Verticales) this.Invoke(new Invocación.Delegado_Control_Text(Invocación.Ejecutar_Delegado_Control_Text), new object[] { this, Texto_Título + " - [Drawing the chunk " + Program.Traducir_Número(Chunks_Dibujados) + " of " + Program.Traducir_Número(Total_Chunks) + "...]" });
                            /*if (Chunks_Dibujados % 32 == 0)
                            {
                                //Picture.BackgroundImage = Imagen;
                                Picture.Invalidate();
                                Picture.Update();
                            }*/
                            if (Variable_Dibujar_Chunks_Limos && Variable_Temporal_Zoom == 1) // It's only 100 % accurate (X and Z well centered) with a zoom of 1x.
                            {
                                int Chunk_X = (Región.Posición.X * 32) + Lista_Posiciones_Chunks[Índice_Región][Índice_Chunk].X;
                                int Chunk_Z = (Región.Posición.Y * 32) + Lista_Posiciones_Chunks[Índice_Región][Índice_Chunk].Y;
                                bool Chunk_Limos = new Program.Random_Java((ulong)((long)Información_Nivel.RandomSeed + (long)(Chunk_X * Chunk_X * 4987142) + (long)(Chunk_X * 5947611) + (long)(Chunk_Z * Chunk_Z) * 4392871L + (long)(Chunk_Z * 389711) ^ 987234911L)).nextInt(10) == 0;
                                if (Chunk_Limos)
                                {
                                    //SolidBrush Pincel = new SolidBrush(Color.FromArgb(128, 0, 255, 0));
                                    //HatchBrush Pincel = new HatchBrush(HatchStyle.Percent50, Color.FromArgb(160, 0, 255, 0), Color.FromArgb(160, 0, 160, 0));
                                    HatchBrush Pincel = new HatchBrush(HatchStyle.DiagonalCross, Color.FromArgb(224, 255, 0, 160), Color.FromArgb(224, 0, 0, 0));
                                    CompositingMode Modo_Composición = Pintar.CompositingMode;
                                    Pintar.CompositingMode = CompositingMode.SourceOver;
                                    Pintar.FillRectangle(Pincel, new Rectangle(Lista_Posiciones_Pintar[Índice_Región][Índice_Chunk], new Size(Zoom_16, Zoom_16)));
                                    Pintar.CompositingMode = Modo_Composición;
                                    Pincel.Dispose();
                                    Pincel = null;
                                }
                            }
                            //Rectangle Rectángulo_Chunk = new Rectangle(Posición_Dibujar, new Size(Zoom_16, Zoom_16));
                            //Picture.Invoke(new Invocación.Delegado_Control_Invalidate_Rectangle(Invocación.Ejecutar_Delegado_Control_Invalidate_Rectangle), new object[] { Picture, Rectángulo_Chunk });
                        }
                    }
                }
                /*string Test = null;
                if (Minecraft.Diccionario_Estructuras_Únicas != null && Minecraft.Diccionario_Estructuras_Únicas.Count > 0)
                {
                    foreach (KeyValuePair<string, object> Entrada in Minecraft.Diccionario_Estructuras_Únicas)
                    {
                        Test += Entrada.Key + "\r\n";
                    }
                    if (!string.IsNullOrEmpty(Test)) MessageBox.Show(Test);
                }*/
                if (Variable_Temporal_Mapa == Mapas.Aire_Subterráneo || Variable_Temporal_Mapa == Mapas.Cuevas_Subterráneas || Variable_Temporal_Mapa == Mapas.Bloques_Únicos_Verticales)
                {
                    int Máximo_Aire_Cuevas_Subterráneo = 0;
                    for (int Índice_Z = 0; Índice_Z < Alto_Cliente; Índice_Z++)
                    {
                        for (int Índice_X = 0; Índice_X < Ancho_Cliente; Índice_X++)
                        {
                            if (Pendiente_Subproceso_Abortar) return;
                            if (Matriz_Aire_Cuevas_Subterráneas_Bloques_Únicos[Índice_X, Índice_Z] > Máximo_Aire_Cuevas_Subterráneo) Máximo_Aire_Cuevas_Subterráneo = Matriz_Aire_Cuevas_Subterráneas_Bloques_Únicos[Índice_X, Índice_Z];
                        }
                    }
                    for (int Índice_Z = 0; Índice_Z < Alto_Cliente; Índice_Z++)
                    {
                        for (int Índice_X = 0; Índice_X < Ancho_Cliente; Índice_X++)
                        {
                            if (Pendiente_Subproceso_Abortar) return;
                            Color Color_ARGB;
                            if (!Variable_Temporal_Mapa_3D)
                            {
                                int Gris = Máximo_Aire_Cuevas_Subterráneo > 0 ? 255 - ((Math.Min((int)Matriz_Aire_Cuevas_Subterráneas_Bloques_Únicos[Índice_X, Índice_Z], 255) * 255) / Máximo_Aire_Cuevas_Subterráneo) : 255;
                                Color_ARGB = Color.FromArgb(255, Gris, Gris, Gris);
                            }
                            else
                            {
                                int Matiz = Máximo_Aire_Cuevas_Subterráneo > 0 ? 1275 - ((Math.Min((int)Matriz_Aire_Cuevas_Subterráneas_Bloques_Únicos[Índice_X, Índice_Z], 255) * 1275) / Máximo_Aire_Cuevas_Subterráneo) : 1275;
                                Color_ARGB = Program.Obtener_Color_Puro_1530(Matiz);
                            }
                            SolidBrush Pincel = new SolidBrush(Color_ARGB);
                            Pintar.FillRectangle(Pincel, Índice_X, Índice_Z, Zoom, Zoom);
                        }
                    }
                    Matriz_Aire_Cuevas_Subterráneas_Bloques_Únicos = null;
                    Picture.Invoke(new Invocación.Delegado_Control_Invalidate(Invocación.Ejecutar_Delegado_Control_Invalidate), new object[] { Picture });
                    Picture.Invoke(new Invocación.Delegado_Control_Update(Invocación.Ejecutar_Delegado_Control_Update), new object[] { Picture });
                    //Picture.Invalidate();
                    //Picture.Update();
                }
                Picture.Invoke(new Invocación.Delegado_Control_Invalidate(Invocación.Ejecutar_Delegado_Control_Invalidate), new object[] { Picture });
                //File.WriteAllText(Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + "\\NBTs, 09-03-2018.txt", Minecraft.Texto_Names);
                //System.Diagnostics.Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + "\\NBTs, 09-03-2018.txt");
                //Environment.Exit(0);
                //MessageBox.Show(Minecraft.Texto_Names, Minecraft.Máximo.ToString());
                //MessageBox.Show(Chunks_Dibujados.ToString() + " de " + ((Chunks_Ancho / 16) * (Chunks_Alto / 16)).ToString());
                this.Invoke(new Invocación.Delegado_Control_Text(Invocación.Ejecutar_Delegado_Control_Text), new object[] { this, Texto_Título + " - [Done in " + Program.Traducir_Intervalo_Minutos_Segundos(Cronómetro.Elapsed) + ", visible chunks: " + Program.Traducir_Número(Chunks_Dibujados) + "]" });
                Cronómetro.Stop();
                Cronómetro = null;
                //Picture.Update();
            }
            catch (ThreadAbortException) { } // Just ignore this exception.
            catch (OutOfMemoryException Excepción)
            {
                Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null);
                foreach (KeyValuePair<string, string> Entrada in Diccionario_Dimensiones_Rutas)
                {
                    Diccionario_Dimensiones_Caché_Regiones[Entrada.Key].Clear();
                }
                this.Text = Texto_Título + " - [The program ran out of memory... Sorry]";
                if (!Variable_Vaciar_Caché_Fuera_Pantalla || !Variable_Vaciar_Caché_Otras_Dimensiones)
                {
                    Menú_Contextual_Vaciar_Caché_Fuera_Pantalla.Checked = true; // La primera vez que pase, vaciar las regiones fuera de la pantalla
                    Menú_Contextual_Vaciar_Caché_Otras_Dimensiones.Checked = true; // La primera vez que pase, vaciar las otras dimensiones
                    MessageBox.Show(this, "The program ran out of memory. To avoid this in the future, the options for clearing the other dimensions region cache and the regions outside of the screen has been turned on.\r\nTry to load the map again or press F5 to see if it now works.", Program.Texto_Título_Versión, MessageBoxButtons.OK, MessageBoxIcon.Warning); // La tercera ya no hay nada que hacer...
                }
                else if (!Variable_Vaciar_Caché_Dimensión_Actual)
                {
                    Menú_Contextual_Vaciar_Caché_Dimensión_Actual.Checked = true; // La segunda vez, vaciar también la actual
                    MessageBox.Show(this, "The program ran out of memory. To avoid this in the future, the option for clearing the current dimension region cache also has been turned on.\r\nTry to load the map again or press F5 to see if it now works.", Program.Texto_Título_Versión, MessageBoxButtons.OK, MessageBoxIcon.Warning); // La tercera ya no hay nada que hacer...
                }
                else
                {
                    MessageBox.Show(this, "The program ran out of memory. Sorry for the inconvenient, but the program can't do anything else to save memory. Remember that if you resize the window to a smaller size, it will load less regions at a time, thus using a lot less memory.", Program.Texto_Título_Versión, MessageBoxButtons.OK, MessageBoxIcon.Warning); // La tercera ya no hay nada que hacer...
                }
            }
            catch (Exception Excepción)
            {
                Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null);
                try
                {
                    this.Text = Texto_Título + " - [An exception has been registered...]";
                    //Picture.BackgroundImage = null;
                    //Picture.Invalidate();
                    //Picture.Update();
                }
                catch { }
            }
            finally
            {
                //Picture.Invoke(new Invocación.Delegado_Control_BackColor(Invocación.Ejecutar_Delegado_Control_BackColor), new object[] { Picture, Color_Fondo });
                //Picture.BackColor = Color_Fondo;
                if (Pendiente_Subproceso_Abortar)
                {
                    //Pintar.Clear(Color.Transparent);
                    //Picture.Invoke(new Invocación.Delegado_Control_Invalidate(Invocación.Ejecutar_Delegado_Control_Invalidate), new object[] { Picture });
                    //Picture.Invoke(new Invocación.Delegado_Control_Update(Invocación.Ejecutar_Delegado_Control_Update), new object[] { Picture });
                    //Picture.Invalidate();
                    //Picture.Update();
                }
                this.Invoke(new Invocación.Delegado_Control_Cursor(Invocación.Ejecutar_Delegado_Control_Cursor), new object[] { this, Cursors.Default });
                Minecraft.Pendiente_Subproceso_Abortar = false;
                Pendiente_Subproceso_Abortar = false;
                Subproceso_Activo = false;
                Subproceso = null;
                GC.Collect();
                GC.GetTotalMemory(true);
            }
        }

        private void ComboBox_Mundos_Curse_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (!Ocupado && ComboBox_Mundos_Curse.SelectedIndex > -1) Ruta_Pendiente_Abrir = Lista_Rutas_Mundos_Twitch[ComboBox_Mundos_Curse.SelectedIndex];
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void ComboBox_Mundos_Minecraft_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (!Ocupado && ComboBox_Mundos_Minecraft.SelectedIndex > -1) Ruta_Pendiente_Abrir = Lista_Rutas_Mundos_Minecraft[ComboBox_Mundos_Minecraft.SelectedIndex];
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void ComboBox_Posición_Jugador_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (!Ocupado && !string.IsNullOrEmpty(ComboBox_Posición_Jugador.Text))
                {
                    Ocupado = true;
                    try { Numérico_X.Value = (decimal)Diccionario_Posiciones_Jugadores[ComboBox_Posición_Jugador.Text].X; }
                    catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
                    //try { Numérico_Y.Value = (decimal)Diccionario_Posiciones_Jugadores[ComboBox_Posición_Jugador.Text].Y; }
                    //catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
                    try { Numérico_Z.Value = (decimal)Diccionario_Posiciones_Jugadores[ComboBox_Posición_Jugador.Text].Z; }
                    catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
                    Ocupado = false;
                    Pendiente_Dibujar_Mapa = true;
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Barra_Estado_Etiqueta_Coordenadas_XZ_Cursor_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Middle)
                {
                    Clipboard.SetText("/tp @p " + Variable_X.ToString() + " " + Variable_Y.ToString() + " " + Variable_Z.ToString());
                    SystemSounds.Asterisk.Play();
                }
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Copiar_Coordenadas_Cursor_Click(object sender, EventArgs e)
        {
            try
            {
                Clipboard.SetText("/tp @p " + Variable_Teletransporte_X.ToString() + " " + Variable_Y.ToString() + " " + Variable_Teletransporte_Z.ToString());
                SystemSounds.Asterisk.Play();
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Contar_Densidades_Bloques_Niveles_Y_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Contar_Densidades_Bloques_Niveles_Y = Menú_Contextual_Contar_Densidades_Bloques_Niveles_Y.Checked;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Mostrar_Densidades_Bloques_Niveles_Y_Click(object sender, EventArgs e)
        {
            try
            {
                if (Total_Bloques > 0 && Diccionario_Densidades.Count > 0 && Diccionario_Niveles_Y.Count > 0)
                {
                    Ventana_Visor_Densidades_Bloques Ventana = new Ventana_Visor_Densidades_Bloques();
                    Ventana.Total_Bloques = Total_Bloques;
                    Ventana.Diccionario_Densidades = Diccionario_Densidades;
                    Ventana.Diccionario_Niveles_Y = Diccionario_Niveles_Y;
                    Ventana.ShowDialog(this);
                    Ventana.Dispose();
                    Ventana = null;
                }
                else SystemSounds.Beep.Play();
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Dibujar_Mundo_Completo_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Dibujar_Mundo_Completo = Menú_Contextual_Dibujar_Mundo_Completo.Checked;
                if (!Variable_Dibujar_Mundo_Completo)
                {
                    Picture.Dock = DockStyle.Fill;
                    Ancho_Cliente = Picture.ClientSize.Width;
                    Alto_Cliente = Picture.ClientSize.Height;
                    Numérico_X.Enabled = true;
                    Numérico_Z.Enabled = true;
                }
                else
                {
                    Numérico_X.Enabled = false;
                    Numérico_Z.Enabled = false;
                    Picture.Dock = DockStyle.None;
                    if (Diccionario_Dimensiones_Límites.ContainsKey(Variable_Dimensión))
                    {
                        // Get the central coordinates of the current dimension:
                        Rectangle Rectángulo = Diccionario_Dimensiones_Límites[Variable_Dimensión];
                        int X = ((Rectángulo.Width - Rectángulo.X) + 1) / 2;
                        int Z = ((Rectángulo.Height - Rectángulo.Y) + 1) / 2;
                        int Ancho = ((Rectángulo.Width + 1) - Rectángulo.X) * Variable_Zoom;
                        int Alto = ((Rectángulo.Height + 1) - Rectángulo.Y) * Variable_Zoom;

                        if (Ancho > 30000) Ancho = 30000; // 2018_08_07_16_02_56_024
                        if (Alto > 30000) Alto = 30000;

                        // Center the PictureBox control on that coordinates and adjust it's size:
                        Ancho_Cliente = Ancho;
                        Alto_Cliente = Alto;
                        Picture.Size = new Size(Ancho, Alto);
                        Picture.Location = new Point((Panel_Picture.ClientSize.Width / 2) - (Ancho / 2), (Panel_Picture.ClientSize.Height / 2) - (Alto / 2));
                    }
                    else
                    {
                        Picture.Location = new Point(0, 0);
                        Picture.Size = Panel_Picture.ClientSize;
                    }
                }
                Registro_Guardar_Opciones();
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Dibujar_Estructuras_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Dibujar_Estructuras = Menú_Contextual_Dibujar_Estructuras.Checked;
                //Registro_Guardar_Opciones(); // Still does nothing with this variable.
                Pendiente_Dibujar_Mapa = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }

        private void Menú_Contextual_Dibujar_Chunks_Limos_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                Variable_Dibujar_Chunks_Limos = Menú_Contextual_Dibujar_Chunks_Limos.Checked;
                //Registro_Guardar_Opciones(); // Still does nothing with this variable.
                Pendiente_Dibujar_Mapa = true;
            }
            catch (Exception Excepción) { Depurador.Escribir_Excepción(Excepción != null ? Excepción.ToString() : null); Variable_Excepción_Total++; Variable_Excepción = true; }
        }
    }
}
